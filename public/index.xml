<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>VP Nagraj on VP Nagraj</title>
    <link>/</link>
    <description>Recent content in VP Nagraj on VP Nagraj</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018</copyright>
    <lastBuildDate>Wed, 20 Apr 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>ROC Curves in R</title>
      <link>/notes/plot-roc/</link>
      <pubDate>Sun, 30 Jun 2019 17:14:59 +0000</pubDate>
      
      <guid>/notes/plot-roc/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;A receiver operating characteristic curve, or ROC curve, is a graphical plot that illustrates the diagnostic ability of a binary classifier system as its discrimination threshold is varied.&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There is plenty of available information on how to plot ROC curves in R:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.revolutionanalytics.com/2016/08/roc-curves-in-two-lines-of-code.html&#34; class=&#34;uri&#34;&gt;https://blog.revolutionanalytics.com/2016/08/roc-curves-in-two-lines-of-code.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/plotROC/vignettes/examples.html&#34; class=&#34;uri&#34;&gt;https://cran.r-project.org/web/packages/plotROC/vignettes/examples.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://campus.datacamp.com/courses/machine-learning-with-tree-based-models-in-r/boosted-trees?ex=12&#34; class=&#34;uri&#34;&gt;https://campus.datacamp.com/courses/machine-learning-with-tree-based-models-in-r/boosted-trees?ex=12&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=qcvAqAH60Yw&#34; class=&#34;uri&#34;&gt;https://www.youtube.com/watch?v=qcvAqAH60Yw&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A 2019 RViews post compares different methods side-by-side:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://rviews.rstudio.com/2019/03/01/some-r-packages-for-roc-curves/&#34; class=&#34;uri&#34;&gt;https://rviews.rstudio.com/2019/03/01/some-r-packages-for-roc-curves/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The example that follows provides a documented method I have used to plot ROC curves, both with the &lt;code&gt;pROC&lt;/code&gt; package alone … and also using data from the &lt;code&gt;pROC&lt;/code&gt; ROC AUC object and &lt;code&gt;ggplot2&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;First, some code for to prepare the data (the &lt;code&gt;Titanic&lt;/code&gt; dataset in this case) for modeling:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)

expand_counts &amp;lt;- function(.data, freq_col) {
  
  quo_freq &amp;lt;- dplyr::enquo(freq_col)
  
  freqs &amp;lt;- dplyr::pull(.data, !!quo_freq)
  
  ind &amp;lt;- rep(seq_len(nrow(.data)), freqs)
  
  # Drop count column
  .data &amp;lt;- dplyr::select(.data, - !!quo_freq)
  
  # Get the rows from x
  .data[ind, ]
  
}

titanic &amp;lt;-
  as.data.frame(Titanic, stringsAsFactors = FALSE) %&amp;gt;%
  expand_counts(Freq) %&amp;gt;%
  mutate(Survived = ifelse(Survived == &amp;quot;Yes&amp;quot;, 1, 0))

as.data.frame(Titanic)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Class    Sex   Age Survived Freq
## 1    1st   Male Child       No    0
## 2    2nd   Male Child       No    0
## 3    3rd   Male Child       No   35
## 4   Crew   Male Child       No    0
## 5    1st Female Child       No    0
## 6    2nd Female Child       No    0
## 7    3rd Female Child       No   17
## 8   Crew Female Child       No    0
## 9    1st   Male Adult       No  118
## 10   2nd   Male Adult       No  154
## 11   3rd   Male Adult       No  387
## 12  Crew   Male Adult       No  670
## 13   1st Female Adult       No    4
## 14   2nd Female Adult       No   13
## 15   3rd Female Adult       No   89
## 16  Crew Female Adult       No    3
## 17   1st   Male Child      Yes    5
## 18   2nd   Male Child      Yes   11
## 19   3rd   Male Child      Yes   13
## 20  Crew   Male Child      Yes    0
## 21   1st Female Child      Yes    1
## 22   2nd Female Child      Yes   13
## 23   3rd Female Child      Yes   14
## 24  Crew Female Child      Yes    0
## 25   1st   Male Adult      Yes   57
## 26   2nd   Male Adult      Yes   14
## 27   3rd   Male Adult      Yes   75
## 28  Crew   Male Adult      Yes  192
## 29   1st Female Adult      Yes  140
## 30   2nd Female Adult      Yes   80
## 31   3rd Female Adult      Yes   76
## 32  Crew Female Adult      Yes   20&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sample_n(titanic, 10)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Class    Sex   Age Survived
## 1    3rd   Male Adult        0
## 2   Crew   Male Adult        0
## 3   Crew   Male Adult        0
## 4   Crew   Male Adult        0
## 5    2nd Female Child        1
## 6   Crew   Male Adult        0
## 7    1st   Male Adult        0
## 8   Crew   Male Adult        0
## 9    1st Female Adult        1
## 10   3rd   Male Adult        1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The model will predict survival (yes/no) from the Titanic. Predictors will include class, sex, and age. We’ll look at a model of with passenger class as the only predictor versus a model that includes class, sex, and age.&lt;/p&gt;
&lt;div id=&#34;survived-class&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;code&gt;Survived ~ Class&lt;/code&gt;&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(pROC)

fit1 &amp;lt;- glm(Survived ~ Class, data = titanic, family = binomial)

prob &amp;lt;- predict(fit1,type=c(&amp;quot;response&amp;quot;))

fit1$prob &amp;lt;- prob

roc1 &amp;lt;- roc(Survived ~ prob, data = titanic, plot = FALSE)

roc1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## roc.formula(formula = Survived ~ prob, data = titanic, plot = FALSE)
## 
## Data: prob in 1490 controls (Survived 0) &amp;lt; 711 cases (Survived 1).
## Area under the curve: 0.6417&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;survived-class-sex-age&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;code&gt;Survived ~ Class + Sex + Age&lt;/code&gt;&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fit2 &amp;lt;- glm(Survived ~ Class + Sex + Age, data = titanic, family = binomial)

prob &amp;lt;- predict(fit2,type=c(&amp;quot;response&amp;quot;))

fit2$prob &amp;lt;- prob

roc2 &amp;lt;- roc(Survived ~ prob, data = titanic, plot = FALSE)

roc2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## roc.formula(formula = Survived ~ prob, data = titanic, plot = FALSE)
## 
## Data: prob in 1490 controls (Survived 0) &amp;lt; 711 cases (Survived 1).
## Area under the curve: 0.7597&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(roc1, lty = &amp;quot;solid&amp;quot;)
lines(roc2, lty = &amp;quot;dotted&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/notes/plot-roc_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggplot2)

df1 &amp;lt;- 
  data_frame(
    sensitivity = roc1$sensitivities,
    specificity = roc1$specificities,
    thresholds = roc1$thresholds,
    model = &amp;quot;Survived ~ Class&amp;quot;
  )

df2 &amp;lt;- 
  data_frame(
    sensitivity = roc2$sensitivities,
    specificity = roc2$specificities,
    thresholds = roc2$thresholds,
    model = &amp;quot;Survived ~ Class + Sex + Age&amp;quot;
  )

rbind(df1,df2) %&amp;gt;%
  ggplot(aes(1-specificity, sensitivity)) +
  geom_line(aes(group = model, lty = model)) +
  theme(legend.position = &amp;quot;bottom&amp;quot;, 
        legend.title = element_blank())&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/notes/plot-roc_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;From &lt;a href=&#34;https://en.wikipedia.org/wiki/Receiver_operating_characteristic&#34;&gt;Receiver operating characteristic&lt;/a&gt; by &lt;a href=&#34;https://en.wikipedia.org/&#34;&gt;Wikipedia&lt;/a&gt; licensed under &lt;a href=&#34;https://creativecommons.org/licenses/by-sa/3.0/us/&#34;&gt;CC BY-SA 3.0&lt;/a&gt;.&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Looping Across Files</title>
      <link>/notes/file-manipulation-loops/</link>
      <pubDate>Sat, 29 Jun 2019 17:14:59 +0000</pubDate>
      
      <guid>/notes/file-manipulation-loops/</guid>
      <description>&lt;p&gt;When performing repetitive file manipulation operations, it can be useful to write a loop.&lt;/p&gt;
&lt;p&gt;Let’s assume you have a file structure organized as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.
+-- loop.sh
+-- loop.R
+-- raw
|   +-- sample1.bed
|   +-- sample2.bed
|   +-- sample3.bed
|   +-- sample4.bed
|   +-- sample5.bed
+-- processed
|   +-- &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You’d like to loop through all of the &lt;code&gt;.bed&lt;/code&gt; files in the &lt;code&gt;raw/&lt;/code&gt; directory, and output the first and last columns in a &lt;code&gt;.csv&lt;/code&gt; file in the &lt;code&gt;processed/&lt;/code&gt; directory that shares the same file prefix (i.e. “sample1”) as the given input.&lt;/p&gt;
&lt;p&gt;To do so you have could write a bash script that is in a file called &lt;code&gt;loop.sh&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;#!/bin/bash

# loop through all .bed files in the raw dir
FILES=raw/*.bed

for f in $FILES

do
  # message
  printf &amp;quot;\n%s\n%s\n&amp;quot; &amp;quot;processing $f ...&amp;quot; &amp;quot;------------------------------&amp;quot;

  # get input file name ...
  # ... and create output file based on that
  in_fn=$(basename -- &amp;quot;$f&amp;quot;)
  out_fn=&amp;quot;${in_fn%.*}&amp;quot;

  # use awk to get first and last columns  ...
  # ... pipe output to csv format
  awk &amp;#39;BEGIN{FS=&amp;quot;\t&amp;quot;;OFS=&amp;quot;,&amp;quot;}{print $1, $NF}&amp;#39; $f &amp;gt; processed/&amp;quot;$out_fn&amp;quot;.csv

done&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In R (presumably the &lt;code&gt;loop.R&lt;/code&gt; file) you could write something like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;files &amp;lt;- list.files(&amp;quot;raw&amp;quot;, full.names = TRUE)

for (f in files) {
  
  bed &amp;lt;- read.delim(f, sep = &amp;quot;\t&amp;quot;)
  
  out_fp &amp;lt;- paste0(&amp;quot;processed/&amp;quot;, 
                   tools::file_path_sans_ext(basename(f)),
                   &amp;quot;.csv&amp;quot;)
  
  write.csv(bed[,c(1,ncol(bed))], row.names = FALSE, file = out_fp)
  
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Both of the above should work and yield the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.
+-- loop.sh
+-- loop.R
+-- raw
|   +-- sample1.bed
|   +-- sample2.bed
|   +-- sample3.bed
|   +-- sample4.bed
|   +-- sample5.bed
+-- processed
|   +-- sample1.csv
|   +-- sample2.csv
|   +-- sample3.csv
|   +-- sample4.csv
|   +-- sample5.csv&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, your choice of method could have serious performance implications.&lt;/p&gt;
&lt;p&gt;I tested this on dummy files that were roughly 100MB each (~ 2.5 million rows, 4 columns).&lt;/p&gt;
&lt;p&gt;The R method took ~ 90 seconds … the bash script finished in 30 seconds.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Docker Image for tabulizer</title>
      <link>/notes/docker-tabulizer/</link>
      <pubDate>Thu, 27 Jun 2019 17:14:59 +0000</pubDate>
      
      <guid>/notes/docker-tabulizer/</guid>
      <description>&lt;div id=&#34;tldr&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;TL;DR&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;tabulizer&lt;/code&gt; R package allows you extract tables from PDFs. It requires Java dependencies. To use the package via a Docker container:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;docker pull vpnagraj/tabulizer
mkdir output
# table of interest is on page 5 of some.pdf
infile=some.pdf
docker run -ti \
-v $(pwd)/$infile:/$infile \
-v $(pwd)/output:/output vpnagraj/tabulizer $infile 5&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;p&gt;Avoidance of dependency hell can motivate folks to move towards containerization. I recently experienced (admittedly minor) frustration with installing dependencies for an R workflow. I had read about the &lt;a href=&#34;https://github.com/ropensci/tabulizer&#34;&gt;&lt;code&gt;tabulizer&lt;/code&gt; R package&lt;/a&gt;, which serves as a set of bindings for the &lt;a href=&#34;https://github.com/tabulapdf/tabula-java/&#34;&gt;&lt;code&gt;tabula&lt;/code&gt; PDF table extractor Java library&lt;/a&gt;. The documentation for &lt;code&gt;tabulizer&lt;/code&gt; explains that Mac OS users need a &lt;a href=&#34;https://support.apple.com/kb/DL1572?locale=en_US&#34;&gt;particular version of Java&lt;/a&gt;. I wanted to try the package but preferred not to install the recommended (but deprecated) version of Java. So instead, I put together a workflow using Docker to:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Containerize all of the necessary software&lt;/li&gt;
&lt;li&gt;Script the container image to run R code that calls functions from the &lt;code&gt;tabulizer&lt;/code&gt; package&lt;/li&gt;
&lt;li&gt;Specify the Docker “Entrypoint” such that I could pass in a &lt;code&gt;.pdf&lt;/code&gt; file and page number with a table to be extracted&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The code below includes the &lt;code&gt;Dockerfile&lt;/code&gt; and instructions to build the container. Alternatively the image is on &lt;a href=&#34;https://hub.docker.com/r/vpnagraj/tabulizer&#34;&gt;DockerHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;dockerfile&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;code&gt;Dockerfile&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;The Docker image first pulls the latest version of the &lt;code&gt;r-base&lt;/code&gt; image, then installs Java dependencies and R package. The commands also make an &lt;code&gt;output/&lt;/code&gt; directory (to be mapped to a local equivalent on the host during &lt;code&gt;docker run&lt;/code&gt;) and copies the &lt;code&gt;run.R&lt;/code&gt; script from the local machine into the container. Finally, the uses &lt;a href=&#34;https://goinbigdata.com/docker-run-vs-cmd-vs-entrypoint/&#34;&gt;&lt;code&gt;ENTRYPOINT&lt;/code&gt; to run a command when the container is executed&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;FROM r-base:latest

RUN apt-get -y update &amp;amp;&amp;amp; apt-get install -y \
   default-jdk \
   r-cran-rjava

RUN Rscript -e &amp;quot;install.packages(c(&amp;#39;tabulizer&amp;#39;), repos = &amp;#39;http://cran.rstudio.com&amp;#39;)&amp;quot;

# create output directory
RUN mkdir output

# move run script in
COPY ./run.R /

ENTRYPOINT [&amp;quot;Rscript&amp;quot;,&amp;quot;--vanilla&amp;quot;, &amp;quot;run.R&amp;quot;]                                          &lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;run.r&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;code&gt;run.R&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;run.R&lt;/code&gt; script is copied into the Docker image when built. When the container is run, the script is executed. The code parses the two command line arguments (first is the location of the .pdf file, second is the page that contains the table). The code writes the parsed table to a &lt;code&gt;.csv&lt;/code&gt; file.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tabulizer)

arguments &amp;lt;- commandArgs(trailingOnly = TRUE)

f &amp;lt;- arguments[1]
p &amp;lt;- arguments[2]

tab &amp;lt;- extract_tables(f,p)

if(is.list(tab) &amp;amp;&amp;amp; !is.data.frame(tab)) {

  tab &amp;lt;- tab[[1]]

}

out_path &amp;lt;- paste0(&amp;quot;output/&amp;quot;,tools::file_path_sans_ext(f), &amp;quot;_&amp;quot;, p, &amp;quot;.csv&amp;quot;)

res_out &amp;lt;- try(write.csv(tab, file = out_path, row.names = FALSE))

if(is.null(res_out)) {

  message(
    sprintf(&amp;quot;%s parsed and written to %s (%d)&amp;quot;, 
            f, 
            out_path,
            nrow(tab)
            )
    )

} else {

  message(res_out)

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;building-the-image&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Building the image&lt;/h4&gt;
&lt;p&gt;To build the image first clone the GitHub repository that contains the image code:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;git clone https://github.com/vpnagraj/tabulizer-docker.git&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Make sure &lt;code&gt;run.R&lt;/code&gt; has appropriate permissons to be executed:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;cd tabulizer-docker
chmod+x run.R&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Build the image:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;docker build -t --no-cache vpnagraj/tabulizer .&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Alternatively you can pull the &lt;a href=&#34;https://cloud.docker.com/u/vpnagraj/repository/docker/vpnagraj/tabulizer&#34;&gt;existing image from DockerHub&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;docker pull vpnagraj/tabulizer&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;running&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Running&lt;/h4&gt;
&lt;p&gt;To run the image you can first make sure you’ve created a directory for the output next to the &lt;code&gt;.pdf&lt;/code&gt; file you’ll parse:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;mkdir output&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next (optionally) set a variable to the input file to parse (a PDF called &lt;code&gt;some.pdf&lt;/code&gt; in this example):&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;infile=some.pdf&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now run the container … in this case we want the table that’s on page 5 of &lt;code&gt;some.pdf&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;docker run -ti -v $(pwd)/$infile:/$infile -v $(pwd)/output:/output vpnagraj/tabulizer $infile 5&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If successful, the output will be in &lt;code&gt;.csv&lt;/code&gt; format at &lt;code&gt;output/some_5.csv&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;example&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Example&lt;/h4&gt;
&lt;p&gt;Here is a scenario …&lt;/p&gt;
&lt;p&gt;The May 2019 CDC Vital Statistics Rapid Release includes data regarding births in the United States from 2017 and 2018:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cdc.gov/nchs/data/vsrr/vsrr-007-508.pdf&#34; class=&#34;uri&#34;&gt;https://www.cdc.gov/nchs/data/vsrr/vsrr-007-508.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Page 15 features a table of the rate of preterm birth by state.&lt;/p&gt;
&lt;p&gt;Assuming I have the PDF above downloaded and the &lt;code&gt;tabulizer&lt;/code&gt; Docker container available, I could run the following (from the directory that holds the &lt;code&gt;.pdf&lt;/code&gt;):&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;mkdir output
infile=vsrr-007-508.pdf&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;docker run -ti \
-v $(pwd)/$infile:/$infile \
-v $(pwd)/output:/output vpnagraj/tabulizer $infile 15&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)

preterm &amp;lt;-
  # skip mostly empty rows and ignore overall US values
  read_csv(&amp;quot;output/vsrr-007-508_15.csv&amp;quot;, 
           skip = 4) %&amp;gt;%
  select(State = 1, `2018` =  7, `2017` = 9)

preterm %&amp;gt;%
  head(10)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 10 x 3
##    State                `2018` `2017`
##    &amp;lt;chr&amp;gt;                 &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;
##  1 Alabama               12.5   12.0 
##  2 Alaska                 9.26   8.98
##  3 Arizona                9.51   9.27
##  4 Arkansas              11.6   11.4 
##  5 California             8.79   8.68
##  6 Colorado               9.22   8.76
##  7 Connecticut            9.36   9.48
##  8 Delaware               9.55  10.2 
##  9 District of Columbia  10.1   10.6 
## 10 Florida               10.2   10.2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;preterm %&amp;gt;%
  # no dc ...
  filter(State != &amp;quot;District of Columbia&amp;quot;) %&amp;gt;%
  gather(year,value,`2018`:`2017`) %&amp;gt;%
  mutate(value = value/100) %&amp;gt;%
  ggplot(aes(year, value, group = State)) +
  geom_point()  +
  geom_line() +
  scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
  labs(x = NULL, 
       y = &amp;quot;% infants born preterm&amp;quot;, 
       title  = &amp;quot;Rate of Preterm Birth by State&amp;quot;) +
  facet_wrap(~ State, ncol = 10) +
  theme_bw() +
  theme(text = element_text(size = 7))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/notes/docker-tabulizer_files/figure-html/unnamed-chunk-14-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The data above was acquired from the CDC National Center for Health Statistics. The report states that all material is in the public domain and may be reproduced or copied without comission.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hamilton BE, Martin JA, Osterman MJK, Rossen LM. Births: Provisional data for 2018. Vital Statistics Rapid Release; no 7. Hyattsville, MD: National Center for Health Statistics. May 2019.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Calculating Proportion with N</title>
      <link>/notes/prop-with-n/</link>
      <pubDate>Wed, 26 Jun 2019 17:14:59 +0000</pubDate>
      
      <guid>/notes/prop-with-n/</guid>
      <description>&lt;p&gt;One of the more typical workflows I need to perform is calculating counts within groups. The &lt;strong&gt;dplyr&lt;/strong&gt; &lt;code&gt;group_by() %&amp;gt;% summarise()&lt;/code&gt; pipeline (or just &lt;code&gt;count()&lt;/code&gt;) can easily get aggregated tallies. But occassionally it’s helpful to get count within group along with the proportion overall.&lt;/p&gt;
&lt;p&gt;Here’s one way to do that:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)

# use the starwars dataset
# one row per character
# can be grouped by character species
starwars&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 87 x 13
##    name  height  mass hair_color skin_color eye_color birth_year gender
##    &amp;lt;chr&amp;gt;  &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;          &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt; 
##  1 Luke…    172    77 blond      fair       blue            19   male  
##  2 C-3PO    167    75 &amp;lt;NA&amp;gt;       gold       yellow         112   &amp;lt;NA&amp;gt;  
##  3 R2-D2     96    32 &amp;lt;NA&amp;gt;       white, bl… red             33   &amp;lt;NA&amp;gt;  
##  4 Dart…    202   136 none       white      yellow          41.9 male  
##  5 Leia…    150    49 brown      light      brown           19   female
##  6 Owen…    178   120 brown, gr… light      blue            52   male  
##  7 Beru…    165    75 brown      light      blue            47   female
##  8 R5-D4     97    32 &amp;lt;NA&amp;gt;       white, red red             NA   &amp;lt;NA&amp;gt;  
##  9 Bigg…    183    84 black      light      brown           24   male  
## 10 Obi-…    182    77 auburn, w… fair       blue-gray       57   male  
## # … with 77 more rows, and 5 more variables: homeworld &amp;lt;chr&amp;gt;,
## #   species &amp;lt;chr&amp;gt;, films &amp;lt;list&amp;gt;, vehicles &amp;lt;list&amp;gt;, starships &amp;lt;list&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;starwars %&amp;gt;%
  # get the count in category with count()
  count(species, name = &amp;quot;species_n&amp;quot;, sort = TRUE) %&amp;gt;%
  # add a column that gives you total of all ...
  # calculate proportion ... 
  # format n (%)
  # keep in mind you won&amp;#39;t be able to sort after formatting as character
  mutate(n = sum(species_n),
         prop = round(species_n/n * 100, digits = 0),
         prop_with_n = paste0(species_n, &amp;quot; (&amp;quot;, prop, &amp;quot;%)&amp;quot;)) %&amp;gt;%
  # return only columns of interest
  select(species, prop_with_n)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 38 x 2
##    species  prop_with_n
##    &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;      
##  1 Human    35 (40%)   
##  2 &amp;lt;NA&amp;gt;     5 (6%)     
##  3 Droid    5 (6%)     
##  4 Gungan   3 (3%)     
##  5 Kaminoan 2 (2%)     
##  6 Mirialan 2 (2%)     
##  7 Twi&amp;#39;lek  2 (2%)     
##  8 Wookiee  2 (2%)     
##  9 Zabrak   2 (2%)     
## 10 Aleena   1 (1%)     
## # … with 28 more rows&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Circular Barplots</title>
      <link>/notes/circular-barplots/</link>
      <pubDate>Sun, 16 Jun 2019 17:14:59 +0000</pubDate>
      
      <guid>/notes/circular-barplots/</guid>
      <description>&lt;p&gt;While preparing figures for a manuscript recently, the first author proposed a plot to compare several phenotypes from every donor in the study. One suggestion was a series of circular barplots (normalized since each phenotype was on a different scale) side-by-side.&lt;/p&gt;
&lt;p&gt;Using &lt;code&gt;ggplot2&lt;/code&gt; that might look something like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggplot2)
library(tidyr)
library(dplyr)

msleep %&amp;gt;%
  select(name,sleep_total,brainwt,bodywt) %&amp;gt;%
  filter(complete.cases(.)) %&amp;gt;%
  gather(key,value, -name) %&amp;gt;%
  group_by(key) %&amp;gt;%
  mutate(value = percent_rank(value)) %&amp;gt;%
  ggplot(aes(name,value)) +
  geom_col() +
  coord_polar() +
  facet_wrap(~ key, ncol = 3) +
  labs(x = NULL,
       y = &amp;quot;Percentile&amp;quot;) +
  theme_minimal()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/notes/circular-barplots_files/figure-html/unnamed-chunk-1-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The figure isn’t easy to interpret in this configuration. Even if the canvases of each of the facets were bigger, the labels would need to be rotated for legibility. With that done, it may still be hard to visually connect phenotypes across individuals. In this example, you have to squint at all three facets consecutively, and even do some jumping back and forth. Eventually you may see that some of the largest animals (in terms of both brain and body weight) actually rank quite low in terms of total sleep … and vice versa.&lt;/p&gt;
&lt;p&gt;One alternative is to plot the bars as concentric circles, with the bars for phenotypes lined up at each individual.&lt;/p&gt;
&lt;p&gt;This is where I stepped away from &lt;code&gt;ggplot2&lt;/code&gt; and started using the &lt;a href=&#34;https://cran.r-project.org/web/packages/circlize/index.html&#34;&gt;&lt;code&gt;circlize&lt;/code&gt; package&lt;/a&gt;. The syntax took some getting used to … but overall I found the package to be quite useful. There was plenty of documentation in &lt;a href=&#34;https://jokergoo.github.io/circlize_book/book/index.html&#34;&gt;the &lt;code&gt;circlize&lt;/code&gt; book&lt;/a&gt;. And I was able to build on some of the examples to get where I needed to go:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(circlize)
library(ComplexHeatmap)
library(gridBase)
library(ggplot2)
library(tidyr)
library(dplyr)

sleep_size &amp;lt;-
  msleep %&amp;gt;%
  select(name,sleep_total,brainwt,bodywt) %&amp;gt;%
  filter(complete.cases(.)) %&amp;gt;%
  mutate(sleep_total = percent_rank(sleep_total),
         brainwt = percent_rank(brainwt),
         bodywt = percent_rank(bodywt),
         index = 1) %&amp;gt;%
  arrange(desc(sleep_total)) %&amp;gt;%
  mutate(name = factor(name))

sleep_size$name &amp;lt;- factor(sleep_size$name, 
                          levels = as.character(sleep_size$name))&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# barplot colors
barcols  &amp;lt;- c(&amp;quot;firebrick&amp;quot;,&amp;quot;steelblue&amp;quot;,&amp;quot;goldenrod&amp;quot;)

# parameters for each of the concentric plots
circos.par(cell.padding = c(0.02, 0, 0.02, 0),
           gap.after = c(rep(1, nrow(sleep_size)-1), 20),
           start.degree = 80,
           track.height = 0.3)

# initialize
# at each level of the factor (in this case animal name) plot at index (x=1 for all animals)
# make sure the limit is set to give room one either side of x for each plot
circos.initialize(factors = sleep_size$name, 
                  x = sleep_size$index, 
                  xlim = c(0,2))&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# create &amp;quot;track&amp;quot; region for and add lines for with y values for scaled sleep total
circos.trackPlotRegion(factors = sleep_size$name, 
                       y = sleep_size$sleep_total, 
                       panel.fun = function(x, y) {
  
  name = get.cell.meta.data(&amp;quot;sector.index&amp;quot;)
  i = get.cell.meta.data(&amp;quot;sector.numeric.index&amp;quot;)
  xlim = get.cell.meta.data(&amp;quot;xlim&amp;quot;)
  ylim = get.cell.meta.data(&amp;quot;ylim&amp;quot;)
  
  #text direction (dd) and adjusmtents (aa)
  theta = circlize(mean(xlim), 1.3)[1, 1] %% 360
  dd &amp;lt;- ifelse(theta &amp;lt; 90 || theta &amp;gt; 270, &amp;quot;clockwise&amp;quot;, &amp;quot;reverse.clockwise&amp;quot;)
  aa = c(1, 0.5)
  if(theta &amp;lt; 90 || theta &amp;gt; 270)  aa = c(0, 0.5)
  
  #plot country labels
  circos.text(x=mean(xlim), y=1.2, labels=name, facing = dd, cex=0.6,  adj = aa)
  
  #plot main sector
  
  circos.axis(labels=FALSE, major.tick=FALSE)
  circos.yaxis(side = &amp;quot;left&amp;quot;, at = seq(0, 1, by = 0.25),
               sector.index = get.all.sector.index()[1], labels.cex = 0.4, labels.niceFacing = FALSE)
  
})

circos.trackLines(factors = sleep_size$name, 
                  x = sleep_size$index, 
                  y = sleep_size$sleep_total, 
                  pch=20, 
                  cex=2, 
                  col = barcols[1],
                  type=&amp;quot;h&amp;quot;, 
                  lwd = 6)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# ... same as above but for body weight
circos.trackPlotRegion(factors = sleep_size$name, 
                       y = sleep_size$bodywt, 
                       panel.fun = function(x, y) {
                         
  circos.axis(labels=FALSE, major.tick=FALSE)
                         
})

circos.trackLines(factors = sleep_size$name, 
                  x = sleep_size$index, 
                  y = sleep_size$bodywt, 
                  pch=20, 
                  cex=2, 
                  col = barcols[2],
                  type=&amp;quot;h&amp;quot;, 
                  lwd = 4)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# ... same as above but for brain weight
circos.trackPlotRegion(factors = sleep_size$name, 
                       y = sleep_size$brainwt, 
                       panel.fun = function(x, y) {
                         
  circos.axis(labels=FALSE, major.tick=FALSE)
                         
})

circos.trackLines(factors = sleep_size$name, 
                  x = sleep_size$index, 
                  y = sleep_size$brainwt, 
                  pch=20, 
                  cex=2, 
                  col = barcols[3],
                  type=&amp;quot;h&amp;quot;, 
                  lwd = 2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;circos.clear()&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# add legend using complex heatmap
# http://jokergoo.github.io/blog/html/add_legend_to_circlize.html
lgd_lines = Legend(at = colnames(sleep_size)[2:4],
                   type = &amp;quot;lines&amp;quot;,
                   legend_gp = gpar(col = barcols, lwd = 2),
                   title_position = &amp;quot;topleft&amp;quot;,
                   labels_gp = gpar(fontsize = 14, lex = 4),
                   title = &amp;quot;Phenotype&amp;quot;)

lgd_list_vertical = packLegend(lgd_lines)


pushViewport(viewport(x = unit(10, &amp;quot;mm&amp;quot;), y = unit(4, &amp;quot;mm&amp;quot;),
                      width = grobWidth(lgd_list_vertical),
                      height = grobHeight(lgd_list_vertical),
                      just = c(&amp;quot;left&amp;quot;, &amp;quot;bottom&amp;quot;)))

grid.draw(lgd_list_vertical)
upViewport()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/img/sleep_bar.png&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>summary_se()</title>
      <link>/notes/summary-se/</link>
      <pubDate>Wed, 08 May 2019 17:14:59 +0000</pubDate>
      
      <guid>/notes/summary-se/</guid>
      <description>&lt;p&gt;I’ve found myself on Winston Chang’s &lt;a href=&#34;http://www.cookbook-r.com/&#34;&gt;cookbook-r website&lt;/a&gt; a number of times before. My most recent visit was to refresh my memory on the strategy for plotting means with error bars with &lt;code&gt;ggplot2&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.cookbook-r.com/Graphs/Plotting_means_and_error_bars_(ggplot2)&#34; class=&#34;uri&#34;&gt;http://www.cookbook-r.com/Graphs/Plotting_means_and_error_bars_(ggplot2)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The recipe makes use of &lt;code&gt;summarySE()&lt;/code&gt; a function that is described in detail in &lt;a href=&#34;http://www.cookbook-r.com/Manipulating_data/Summarizing_data/&#34;&gt;another post that details strategies for summarizing data&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;summarySE()&lt;/code&gt; is a custom function that computes the mean, standard deviation, count, standard error, confidence interval for a variable (“measurevar”) within defined grouping variables (“groupvars”).&lt;/p&gt;
&lt;p&gt;Below is the code for the function, along with a working example of how to use it with the built-in “ToothGrowth” dataset (&lt;code&gt;?ToothGrowth&lt;/code&gt;).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## Summarizes data.
## Gives count, mean, standard deviation, standard error of the mean, and confidence interval (default 95%).
##   data: a data frame.
##   measurevar: the name of a column that contains the variable to be summariezed
##   groupvars: a vector containing names of columns that contain grouping variables
##   na.rm: a boolean that indicates whether to ignore NA&amp;#39;s
##   conf.interval: the percent range of the confidence interval (default is 95%)
summarySE &amp;lt;- function(data=NULL, measurevar, groupvars=NULL, na.rm=FALSE,
                      conf.interval=.95, .drop=TRUE) {
    library(plyr)

    # New version of length which can handle NA&amp;#39;s: if na.rm==T, don&amp;#39;t count them
    length2 &amp;lt;- function (x, na.rm=FALSE) {
        if (na.rm) sum(!is.na(x))
        else       length(x)
    }

    # This does the summary. For each group&amp;#39;s data frame, return a vector with
    # N, mean, and sd
    datac &amp;lt;- ddply(data, groupvars, .drop=.drop,
      .fun = function(xx, col) {
        c(N    = length2(xx[[col]], na.rm=na.rm),
          mean = mean   (xx[[col]], na.rm=na.rm),
          sd   = sd     (xx[[col]], na.rm=na.rm)
        )
      },
      measurevar
    )

    # Rename the &amp;quot;mean&amp;quot; column    
    datac &amp;lt;- rename(datac, c(&amp;quot;mean&amp;quot; = measurevar))

    datac$se &amp;lt;- datac$sd / sqrt(datac$N)  # Calculate standard error of the mean

    # Confidence interval multiplier for standard error
    # Calculate t-statistic for confidence interval: 
    # e.g., if conf.interval is .95, use .975 (above/below), and use df=N-1
    ciMult &amp;lt;- qt(conf.interval/2 + .5, datac$N-1)
    datac$ci &amp;lt;- datac$se * ciMult

    return(datac)
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(ToothGrowth)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    len supp dose
## 1  4.2   VC  0.5
## 2 11.5   VC  0.5
## 3  7.3   VC  0.5
## 4  5.8   VC  0.5
## 5  6.4   VC  0.5
## 6 10.0   VC  0.5&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summarySE(ToothGrowth, 
          measurevar=&amp;quot;len&amp;quot;, 
          groupvars=c(&amp;quot;supp&amp;quot;,&amp;quot;dose&amp;quot;),
          conf.interval = 0.9)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   supp dose  N   len       sd        se       ci
## 1   OJ  0.5 10 13.23 4.459709 1.4102837 2.585209
## 2   OJ  1.0 10 22.70 3.910953 1.2367520 2.267106
## 3   OJ  2.0 10 26.06 2.655058 0.8396031 1.539087
## 4   VC  0.5 10  7.98 2.746634 0.8685620 1.592172
## 5   VC  1.0 10 16.77 2.515309 0.7954104 1.458077
## 6   VC  2.0 10 26.14 4.797731 1.5171757 2.781154&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;tidyeval-approach&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;code&gt;tidyeval&lt;/code&gt; approach&lt;/h3&gt;
&lt;p&gt;The cookbook-r site includes several solutions to the “Summary SE” problem. The &lt;code&gt;summarySE()&lt;/code&gt; function (above) works well, and includes comments explaining each parameter. However, given my inexperience with &lt;code&gt;plyr&lt;/code&gt; I find the code a little hard to understand … or at least harder than if it were written with &lt;code&gt;dplyr&lt;/code&gt;. I decided to try to translate &lt;code&gt;summarySE()&lt;/code&gt; into a syntax that I could use in a pipline with &lt;code&gt;%&amp;gt;%&lt;/code&gt;. To do so, I needed to learn a little about the &lt;a href=&#34;https://tidyeval.tidyverse.org/&#34;&gt;&lt;code&gt;tidyeval&lt;/code&gt; framework&lt;/a&gt; and its programming paradigm.&lt;/p&gt;
&lt;p&gt;The code for the new function (&lt;code&gt;summary_se()&lt;/code&gt;) is below, along with the same ToothGrowth example as above.&lt;/p&gt;
&lt;p&gt;A few notes from my exploration:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;enquo()&lt;/code&gt; caputures the bare variable name, and &lt;code&gt;!!&lt;/code&gt; in a subsequent &lt;code&gt;dplyr&lt;/code&gt; call will reference that variable&lt;/li&gt;
&lt;li&gt;&lt;code&gt;enquos()&lt;/code&gt; and &lt;code&gt;!!!&lt;/code&gt; work in a similar matter but can capture multiple variable names passed in via &lt;code&gt;...&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;It’s good practice to prefix argument names with &lt;code&gt;.&lt;/code&gt; when writing functions that use &lt;code&gt;tidyeval&lt;/code&gt; … the reason being that it is not likely that a user would have an existing column name that starts with &lt;code&gt;.&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary_se &amp;lt;- function(.data, measure_var, ..., .ci = 0.95, na.rm = FALSE) {
  
  measure_var &amp;lt;- dplyr::enquo(measure_var)
  group_var &amp;lt;- dplyr::enquos(...)
  
  .data %&amp;gt;%
    group_by(!!! group_var) %&amp;gt;%
    summarise(mean = mean(!! measure_var, na.rm = na.rm),
              sd = sd(!! measure_var, na.rm = na.rm),
              n = n(),
              se = sd/sqrt(n),
              ci = se * qt(.ci/2 + 0.5, n-1)) %&amp;gt;%
    ungroup()
  
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)
library(ggplot2)

ToothGrowth %&amp;gt;%
  summary_se(len, supp, dose, .ci = 0.9)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 7
##   supp   dose  mean    sd     n    se    ci
##   &amp;lt;fct&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
## 1 OJ      0.5 13.2   4.46    10 1.41   2.59
## 2 OJ      1   22.7   3.91    10 1.24   2.27
## 3 OJ      2   26.1   2.66    10 0.840  1.54
## 4 VC      0.5  7.98  2.75    10 0.869  1.59
## 5 VC      1   16.8   2.52    10 0.795  1.46
## 6 VC      2   26.1   4.80    10 1.52   2.78&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ToothGrowth %&amp;gt;%
  summary_se(len, supp, dose, .ci = 0.9) %&amp;gt;%
  mutate(dose = paste0(&amp;quot;Dose: &amp;quot;, dose, &amp;quot; (mg/day)&amp;quot;)) %&amp;gt;%
  ggplot(aes(supp,mean)) +
  geom_point() +
  geom_errorbar(aes(ymin = mean - ci, 
                    ymax = mean + ci),
                width = 0.2) +
  labs(x = &amp;quot;Vitamin C delivery method&amp;quot;, y = &amp;quot;Mean length of odontoblasts (95% CI)&amp;quot;) +
  coord_flip() +
  facet_wrap(~ dose, ncol = 1) +
  theme_minimal()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/notes/summary-se_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Hosting a Single App with Shiny Server</title>
      <link>/notes/single-app-shiny-server/</link>
      <pubDate>Fri, 08 Mar 2019 11:26:40 -0500</pubDate>
      
      <guid>/notes/single-app-shiny-server/</guid>
      <description>&lt;p&gt;If you’ve written a Shiny app and have reached a point where you would like to share it with others … you have a few options:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://shiny.rstudio.com/deploy/&#34; class=&#34;uri&#34;&gt;https://shiny.rstudio.com/deploy/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Given that you have hardware (or a cloud setup) to install a server, &lt;a href=&#34;https://www.rstudio.com/products/shiny/download-server/&#34;&gt;Shiny Server Open Source&lt;/a&gt; may be a good solution.&lt;/p&gt;
&lt;p&gt;I’ve deployed dozens of apps on different Shiny servers. In some cases, I may need a single server that hosts an entire directory of apps. With this configuration (the default for Shiny Server Open Source) each app is available at {url}/{app-name}.&lt;/p&gt;
&lt;p&gt;However, I occassionally want a server to host a single application that will be available at {url}. In this case, I just need to adjust a few parameters in server configuration. Below is an example &lt;code&gt;shiny-server.conf&lt;/code&gt; file for an app called “prod” that lives in &lt;code&gt;/srv/shiny-server/prod&lt;/code&gt; on the host machine:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Define the user we should use when spawning R Shiny processes
run_as shiny;

# disable idle timeout to retain connection
app_idle_timeout 0;

# Define a top-level server which will listen on a port
server {
  # Instruct this server to listen on port 80. The app at dokku-alt need expose PORT 80, or 500 e etc. See the docs
  listen 80;

  # Define the location available at the base URL
  location / {

    # Run this location in &amp;#39;site_dir&amp;#39; mode, which hosts the entire directory
    # tree at &amp;#39;/srv/shiny-server&amp;#39;
    app_dir /srv/shiny-server/prod;
    
    # Define where we should put the log files for this location
    log_dir /var/log/shiny-server;
    
    # Should we list the contents of a (non-Shiny-App) directory when the user 
    # visits the corresponding URL?
    directory_index on;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that the parameters of interest for this post are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;listen&lt;/code&gt; … explicitly tell the server to &lt;code&gt;listen 80&lt;/code&gt; so that apps are served at port 80 … otherwise you’ll need to specify the port number after the url (i.e. {url}:3737)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;location&lt;/code&gt; … we don’t want to pass any special location to the base URL since we’re defining an &lt;code&gt;app_dir&lt;/code&gt; (see below) … so &lt;code&gt;location /&lt;/code&gt; should work fine&lt;/li&gt;
&lt;li&gt;&lt;code&gt;app_dir&lt;/code&gt; … rather than serving up an entire directory of apps, we just have one … make sure the &lt;code&gt;app_dir&lt;/code&gt; specifies the directory where the app is on the host machine (usually &lt;code&gt;/srv/shiny-server/{app-name}&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>rstudio::conf 2019</title>
      <link>/notes/rstudioconf2019/</link>
      <pubDate>Mon, 11 Feb 2019 17:14:59 +0000</pubDate>
      
      <guid>/notes/rstudioconf2019/</guid>
      <description>&lt;p&gt;This past January I was able to attend &lt;a href=&#34;https://resources.rstudio.com/rstudio-conf-2019&#34;&gt;rstudio::conf 2019&lt;/a&gt; in Austin. I was there for the full week, taking the &lt;em&gt;Building Tidy Tools&lt;/em&gt; workshop and attending as many of the main conference program sessions as possible.&lt;/p&gt;
&lt;p&gt;Here is a collection of highlights/takeaways from the conference …&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#shortcuts&#34;&gt;Shortcuts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#rstudio12&#34;&gt;RStudio 1.2 features&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#tidyeval&#34;&gt;Tidy eval&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#separaterows&#34;&gt;&lt;code&gt;separate_rows&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#rmdpp&#34;&gt;.Rmd to .pptx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#newpkgs&#34;&gt;New packages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;shortcuts&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;a name=&#34;shortcuts&#34;&gt;&lt;/a&gt;Shortcuts&lt;/h3&gt;
&lt;p&gt;Coming into &lt;strong&gt;rstudio::conf&lt;/strong&gt; I had a few keyboard shortcuts memorized. Things like copying a line of code down (&lt;code&gt;CMD + SHIFT + DOWN ARROW&lt;/code&gt;) … inserting the pipe operator (&lt;code&gt;CMD + SHIFT + M&lt;/code&gt;) … and inserting a code chunk (&lt;code&gt;CMD + OPTION + I&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;But there are so many more … a few handy ones that I picked up:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Maximize an Rstudio pane: &lt;code&gt;SHIFT + CTRL + 1&lt;/code&gt; (1,2,3,4 for each pane clockwise)&lt;/li&gt;
&lt;li&gt;Build a package: &lt;code&gt;SHIFT + CMD + B&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Load functions from package after building: &lt;code&gt;SHIFT + CMD + L&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;My friends (and fellow &lt;a href=&#34;https://www.meetup.com/UVa-R-Users-Group/&#34;&gt;Charlottesville R Users&lt;/a&gt;) Jeff Boichuk and Steve Mortimer have also developed an R package (&lt;a href=&#34;https://github.com/jeffboichuk/crossr&#34;&gt;&lt;code&gt;CrossR&lt;/code&gt;&lt;/a&gt;) that includes a data frame with all Rstudio shortcuts:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;devtools::install_github(&amp;quot;jeffboichuk/CrossR&amp;quot;)
library(CrossR)

shortcuts&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 122 x 4
##    category description        mac             windows         
##    &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;              &amp;lt;chr&amp;gt;           &amp;lt;chr&amp;gt;           
##  1 Build    Build All          Shift + Cmd + B Ctrl + Shift + B
##  2 Build    Check Package      Shift + Cmd + E Ctrl + Shift + E
##  3 Build    Compile PDF        Shift + Cmd + K Ctrl + Shift + K
##  4 Build    Devtools Load All  Shift + Cmd + L Ctrl + Shift + L
##  5 Build    Knit Document      Shift + Cmd + K Ctrl + Shift + K
##  6 Build    Preview HTML       Shift + Cmd + K Ctrl + Shift + K
##  7 Build    Roxygenize Package Shift + Cmd + D Ctrl + Shift + D
##  8 Build    Test Package       Shift + Cmd + T Ctrl + Shift + T
##  9 Console  Console Clear      Ctrl + L        Ctrl + L        
## 10 Debug    Debug Breakpoint   Shift + F9      Shift + F9      
## # … with 112 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;find_shortcuts(&amp;quot;roxygen&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2 x 3
##   category      description             mac                  
##   &amp;lt;chr&amp;gt;         &amp;lt;chr&amp;gt;                   &amp;lt;chr&amp;gt;                
## 1 Build         Roxygenize Package      Shift + Cmd + D      
## 2 Source Editor Insert Roxygen Skeleton Shift + Alt + Cmd + R&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;rstudio-1.2-features&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;a name=&#34;rstudio12&#34;&gt;&lt;/a&gt;RStudio 1.2 features&lt;/h3&gt;
&lt;p&gt;The RStudio team is working to make the RStudio IDE an even more comprehensive data science toolkit. Version 1.2 introduces features to support multiple languages, including python, SQL and D3. Jonathan McPherson gave a tour of the new multilingual support:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://resources.rstudio.com/rstudio-conf-2019/new-language-features-in-rstudio&#34; class=&#34;uri&#34;&gt;https://resources.rstudio.com/rstudio-conf-2019/new-language-features-in-rstudio&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I put together a trival example of what this looks workflow looks like for passing R objects to python (and vice versa) from chunk-to-chunk in an R markdown document:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;```{r setup}
  library(reticulate)
  use_python(&amp;quot;/usr/bin/python&amp;quot;, required = TRUE)
```

```{python}
  import random
  x = random.randint(1,99)
  print x
```

```{r}
  # access the object &amp;#39;x&amp;#39; from python environment with py$x
  py$x

  y &amp;lt;- py$x^2

  y
```

```{python}
  # access the object &amp;#39;y&amp;#39; from r environment with r.y
  print r.y

  import math
  z = math.sqrt(r.y)

  print z
```&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For a more complete example (including D3 and SQL chunks), take a look at the &lt;code&gt;spenders.Rmd&lt;/code&gt; example:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/jmcphers/rstudio-1.2-features/blob/master/spenders.Rmd&#34; class=&#34;uri&#34;&gt;https://github.com/jmcphers/rstudio-1.2-features/blob/master/spenders.Rmd&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://resources.rstudio.com/rstudio-conf-2019/new-language-features-in-rstudio?wvideo=86143vxqwr&#34;&gt;New language features in RStudio - Jonathan McPherson&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://resources.rstudio.com/rstudio-conf-2019/new-language-features-in-rstudio?wvideo=86143vxqwr&#34;&gt;&lt;img src=&#34;https://embedwistia-a.akamaihd.net/deliveries/96f8273424b64b06534e9828ebddc37e.jpg?image_play_button_size=2x&amp;amp;image_crop_resized=960x540&amp;amp;image_play_button=1&amp;amp;image_play_button_color=4287c7e0&#34; width=&#34;400&#34; height=&#34;225&#34; style=&#34;width: 400px; height: 225px;&#34;&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;tidy-eval&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;a name=&#34;tidyeval&#34;&gt;&lt;/a&gt;Tidy eval&lt;/h3&gt;
&lt;p&gt;Programming with &lt;a href=&#34;https://tidyeval.tidyverse.org/&#34;&gt;&lt;code&gt;tidy eval&lt;/code&gt;&lt;/a&gt; can seem daunting. One of the sessions of the &lt;code&gt;Building Tidy Tools&lt;/code&gt; workshop focused on tidy eval. That talk demystified the quoting/unquoting workflow. Maybe more importantly for me, I found out that Rstudio is compiling a list of use-cases/examples of tidy eval in the wild:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://community.rstudio.com/t/interesting-tidy-eval-use-cases/21121&#34; class=&#34;uri&#34;&gt;https://community.rstudio.com/t/interesting-tidy-eval-use-cases/21121&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://resources.rstudio.com/rstudio-conf-2019/working-with-names-and-expressions-in-your-tidy-eval-code?wvideo=ebj7te6m65&#34;&gt;Working with names and expressions in your tidy eval code - Lionel Henry&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://resources.rstudio.com/rstudio-conf-2019/working-with-names-and-expressions-in-your-tidy-eval-code?wvideo=ebj7te6m65&#34;&gt;&lt;img src=&#34;https://embedwistia-a.akamaihd.net/deliveries/b866337a304ea75d56f980cdf8cbe125.jpg?image_play_button_size=2x&amp;amp;image_crop_resized=960x540&amp;amp;image_play_button=1&amp;amp;image_play_button_color=4287c7e0&#34; width=&#34;400&#34; height=&#34;225&#34; style=&#34;width: 400px; height: 225px;&#34;&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;separate_rows&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;a name=&#34;separaterows&#34;&gt;&lt;/a&gt;&lt;code&gt;separate_rows()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;tidyr&lt;/code&gt; &lt;code&gt;separate_rows()&lt;/code&gt; function isn’t a new by any means, but it’s one that I picked up during a demo at the conference. This will be handy “wide-to-long” transformations on data that is packed into a single column (and separated by a common delimiter):&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyr)


dat &amp;lt;-
  data.frame(
    id = 1:5,
    diagnosis = c(NA, &amp;quot;A,B,C&amp;quot;, &amp;quot;D&amp;quot;, &amp;quot;B,E,F&amp;quot;, &amp;quot;A&amp;quot;)
  )

dat&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   id diagnosis
## 1  1      &amp;lt;NA&amp;gt;
## 2  2     A,B,C
## 3  3         D
## 4  4     B,E,F
## 5  5         A&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;separate_rows(dat, diagnosis, sep = &amp;quot;,&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   id diagnosis
## 1  1      &amp;lt;NA&amp;gt;
## 2  2         A
## 3  2         B
## 4  2         C
## 5  3         D
## 6  4         B
## 7  4         E
## 8  4         F
## 9  5         A&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;rmd-to-.pptx&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;a name=&#34;rmdpp&#34;&gt;&lt;/a&gt; .Rmd to .pptx&lt;/h3&gt;
&lt;p&gt;Again … not a new feature, but new to me:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://bookdown.org/yihui/rmarkdown/powerpoint-presentation.html&#34; class=&#34;uri&#34;&gt;https://bookdown.org/yihui/rmarkdown/powerpoint-presentation.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can convert R markdown to PowerPoint by specifying &lt;code&gt;powerpoint_presentation&lt;/code&gt; as the output format in the YAML header:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
title: &amp;quot;Figs&amp;quot;
author: &amp;quot;VP Nagraj&amp;quot;
date: &amp;quot;3/10/2019&amp;quot;
output: powerpoint_presentation
---&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;nb&lt;/strong&gt; this output format requires Pandoc 2.x&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;new-packages&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;a name=&#34;newpkgs&#34;&gt;&lt;/a&gt;New packages&lt;/h3&gt;
&lt;p&gt;There were a ton of new (or at least new-ish) packages introduced at &lt;strong&gt;rstudio::conf&lt;/strong&gt;.&lt;/p&gt;
&lt;div id=&#34;ungeviz&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;code&gt;ungeviz&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/wilkelab/ungeviz&#34; class=&#34;uri&#34;&gt;https://github.com/wilkelab/ungeviz&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Tools for visualizing uncertainty with ggplot2.
This package is meant to provide helpful add-on functionality for ggplot2 to visualize uncertainty. The package is particularly focused on hypothetical outcome plots (HOPs) and provides bootstrapping and sampling functionality that integrates well with the ggplot2 API.
The package name comes from the German word “Ungewissheit”, which means uncertainty.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wilkelab/ungeviz/master/man/figures/README-cacao-samples-anim-1.gif&#34; /&gt;&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://resources.rstudio.com/rstudio-conf-2019/visualizing-uncertainty-with-hypothetical-outcomes-plots?wvideo=8m9hzvc38u&#34;&gt;Visualizing uncertainty with hypothetical outcomes plots - Claus Wilke&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://resources.rstudio.com/rstudio-conf-2019/visualizing-uncertainty-with-hypothetical-outcomes-plots?wvideo=8m9hzvc38u&#34;&gt;&lt;img src=&#34;https://embedwistia-a.akamaihd.net/deliveries/8b966c08ac6371481bdfa04f1efe09d859c1dc5b.jpg?image_play_button_size=2x&amp;amp;image_crop_resized=960x540&amp;amp;image_play_button=1&amp;amp;image_play_button_color=4287c7e0&#34; width=&#34;400&#34; height=&#34;225&#34; style=&#34;width: 400px; height: 225px;&#34;&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;tidymodels&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;code&gt;tidymodels&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/tidymodels/tidymodels&#34; class=&#34;uri&#34;&gt;https://github.com/tidymodels/tidymodels&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;tidymodels is a “meta-package” for modeling and statistical analysis that share the underlying design philosophy, grammar, and data structures of the tidyverse.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
&lt;a href=&#34;https://resources.rstudio.com/rstudio-conf-2019/solving-the-model-representation-problem-with-broom?wvideo=silfkxh9is&#34;&gt;Solving the model representation problem with broom - Alex Hayes&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://resources.rstudio.com/rstudio-conf-2019/solving-the-model-representation-problem-with-broom?wvideo=silfkxh9is&#34;&gt;&lt;img src=&#34;https://embedwistia-a.akamaihd.net/deliveries/832c41240142f36a8084d511730cf28a9c5baea8.jpg?image_play_button_size=2x&amp;amp;image_crop_resized=960x540&amp;amp;image_play_button=1&amp;amp;image_play_button_color=4287c7e0&#34; width=&#34;400&#34; height=&#34;225&#34; style=&#34;width: 400px; height: 225px;&#34;&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://resources.rstudio.com/rstudio-conf-2019/parsnip-a-tidy-model-interface?wvideo=xs5oz0b7p2&#34;&gt;parsnip A tidy model interface - Max Kuhn&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://resources.rstudio.com/rstudio-conf-2019/parsnip-a-tidy-model-interface?wvideo=xs5oz0b7p2&#34;&gt;&lt;img src=&#34;https://embedwistia-a.akamaihd.net/deliveries/7283540419338367c2732f4a2d4c434c5cdefaed.jpg?image_play_button_size=2x&amp;amp;image_crop_resized=960x540&amp;amp;image_play_button=1&amp;amp;image_play_button_color=4287c7e0&#34; width=&#34;400&#34; height=&#34;225&#34; style=&#34;width: 400px; height: 225px;&#34;&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;gt&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;code&gt;gt&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/rstudio/gt&#34; class=&#34;uri&#34;&gt;https://github.com/rstudio/gt&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;With the gt package, anyone can make wonderful-looking tables using the R programming language. The gt philosophy: we can construct a wide variety of useful tables with a cohesive set of table parts. These include the table header, the stub, the stub head, the column labels, the table body, and the table footer.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/rstudio/gt/raw/master/man/figures/gt_parts_of_a_table.svg?sanitize=true&#34; /&gt;&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://resources.rstudio.com/rstudio-conf-2019/introducing-the-gt-package?wvideo=d38rerkbwb&#34;&gt;Introducing the gt package - Rich Iannone&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://resources.rstudio.com/rstudio-conf-2019/introducing-the-gt-package?wvideo=d38rerkbwb&#34;&gt;&lt;img src=&#34;https://embedwistia-a.akamaihd.net/deliveries/f54d2b6ffcb5dcf913e67031d060ea98.jpg?image_play_button_size=2x&amp;amp;image_crop_resized=960x540&amp;amp;image_play_button=1&amp;amp;image_play_button_color=4287c7e0&#34; width=&#34;400&#34; height=&#34;225&#34; style=&#34;width: 400px; height: 225px;&#34;&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;pagedown&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;code&gt;pagedown&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/rstudio/pagedown&#34; class=&#34;uri&#34;&gt;https://github.com/rstudio/pagedown&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Paginate the HTML Output of R Markdown with CSS for Print. You only need a modern web browser (e.g., Google Chrome) to generate PDF. No need to install LaTeX to get beautiful PDFs.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/163582/46879762-7a34a500-ce0c-11e8-87e3-496f3577ff05.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://resources.rstudio.com/rstudio-conf-2019/pagedown-creating-beautiful-pdfs-with-r-markdown-and-css?wvideo=oxxk6afhtz&#34;&gt;pagedown Creating beautiful PDFs with R Markdown and CSS - Yihui Xie&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://resources.rstudio.com/rstudio-conf-2019/pagedown-creating-beautiful-pdfs-with-r-markdown-and-css?wvideo=oxxk6afhtz&#34;&gt;&lt;img src=&#34;https://embedwistia-a.akamaihd.net/deliveries/77d268f4eb298d5f472a509610ee3fcf.jpg?image_play_button_size=2x&amp;amp;image_crop_resized=960x540&amp;amp;image_play_button=1&amp;amp;image_play_button_color=4287c7e0&#34; width=&#34;400&#34; height=&#34;225&#34; style=&#34;width: 400px; height: 225px;&#34;&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Data-Based Labels</title>
      <link>/notes/data-based-labels/</link>
      <pubDate>Mon, 28 Jan 2019 17:14:59 +0000</pubDate>
      
      <guid>/notes/data-based-labels/</guid>
      <description>&lt;p&gt;Chapter 7 of Edward Tufte’s &lt;strong&gt;The Visual Display of Quantitative Information&lt;/strong&gt; presents advantages of “multifunctioning graphical elements” in data visualiztions. The idea is that features like the shape of points on the plot, grid lines, or even data labels can serve multiple purposes in communicating information.&lt;/p&gt;
&lt;p&gt;For example, take the shape of a stem plot:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggplot2)
library(dplyr)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;glimpse(starwars)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Observations: 87
## Variables: 13
## $ name       &amp;lt;chr&amp;gt; &amp;quot;Luke Skywalker&amp;quot;, &amp;quot;C-3PO&amp;quot;, &amp;quot;R2-D2&amp;quot;, &amp;quot;Darth Vader&amp;quot;, &amp;quot;L…
## $ height     &amp;lt;int&amp;gt; 172, 167, 96, 202, 150, 178, 165, 97, 183, 182, 188, …
## $ mass       &amp;lt;dbl&amp;gt; 77.0, 75.0, 32.0, 136.0, 49.0, 120.0, 75.0, 32.0, 84.…
## $ hair_color &amp;lt;chr&amp;gt; &amp;quot;blond&amp;quot;, NA, NA, &amp;quot;none&amp;quot;, &amp;quot;brown&amp;quot;, &amp;quot;brown, grey&amp;quot;, &amp;quot;bro…
## $ skin_color &amp;lt;chr&amp;gt; &amp;quot;fair&amp;quot;, &amp;quot;gold&amp;quot;, &amp;quot;white, blue&amp;quot;, &amp;quot;white&amp;quot;, &amp;quot;light&amp;quot;, &amp;quot;lig…
## $ eye_color  &amp;lt;chr&amp;gt; &amp;quot;blue&amp;quot;, &amp;quot;yellow&amp;quot;, &amp;quot;red&amp;quot;, &amp;quot;yellow&amp;quot;, &amp;quot;brown&amp;quot;, &amp;quot;blue&amp;quot;, &amp;quot;…
## $ birth_year &amp;lt;dbl&amp;gt; 19.0, 112.0, 33.0, 41.9, 19.0, 52.0, 47.0, NA, 24.0, …
## $ gender     &amp;lt;chr&amp;gt; &amp;quot;male&amp;quot;, NA, NA, &amp;quot;male&amp;quot;, &amp;quot;female&amp;quot;, &amp;quot;male&amp;quot;, &amp;quot;female&amp;quot;, N…
## $ homeworld  &amp;lt;chr&amp;gt; &amp;quot;Tatooine&amp;quot;, &amp;quot;Tatooine&amp;quot;, &amp;quot;Naboo&amp;quot;, &amp;quot;Tatooine&amp;quot;, &amp;quot;Alderaa…
## $ species    &amp;lt;chr&amp;gt; &amp;quot;Human&amp;quot;, &amp;quot;Droid&amp;quot;, &amp;quot;Droid&amp;quot;, &amp;quot;Human&amp;quot;, &amp;quot;Human&amp;quot;, &amp;quot;Human&amp;quot;,…
## $ films      &amp;lt;list&amp;gt; [&amp;lt;&amp;quot;Revenge of the Sith&amp;quot;, &amp;quot;Return of the Jedi&amp;quot;, &amp;quot;The …
## $ vehicles   &amp;lt;list&amp;gt; [&amp;lt;&amp;quot;Snowspeeder&amp;quot;, &amp;quot;Imperial Speeder Bike&amp;quot;&amp;gt;, &amp;lt;&amp;gt;, &amp;lt;&amp;gt;, &amp;lt;…
## $ starships  &amp;lt;list&amp;gt; [&amp;lt;&amp;quot;X-wing&amp;quot;, &amp;quot;Imperial shuttle&amp;quot;&amp;gt;, &amp;lt;&amp;gt;, &amp;lt;&amp;gt;, &amp;quot;TIE Advanc…&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;starwars %&amp;gt;%
  mutate(bmi = mass/((height/100)^2)) %&amp;gt;%
  # no jabba ...
  filter(!grepl(&amp;quot;Jabba&amp;quot;, name)) %&amp;gt;%
  pull(bmi) %&amp;gt;%
  stem(.)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##   The decimal point is 1 digit(s) to the right of the |
## 
##   1 | 3
##   1 | 556777788999
##   2 | 1122233334444444
##   2 | 555555566666667778
##   3 | 123444
##   3 | 5589
##   4 | 
##   4 | 
##   5 | 1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Tufte includes as another example a design originally published in Walter Herdeg’s &lt;strong&gt;Graphis/Diagrams&lt;/strong&gt; (not shown here), which uses data-based labels as a multifunction element. Below is a plot that recreates that concept using the built-in mammalian sleep data from &lt;code&gt;ggplot2&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;glimpse(msleep)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Observations: 83
## Variables: 11
## $ name         &amp;lt;chr&amp;gt; &amp;quot;Cheetah&amp;quot;, &amp;quot;Owl monkey&amp;quot;, &amp;quot;Mountain beaver&amp;quot;, &amp;quot;Greate…
## $ genus        &amp;lt;chr&amp;gt; &amp;quot;Acinonyx&amp;quot;, &amp;quot;Aotus&amp;quot;, &amp;quot;Aplodontia&amp;quot;, &amp;quot;Blarina&amp;quot;, &amp;quot;Bos&amp;quot;…
## $ vore         &amp;lt;chr&amp;gt; &amp;quot;carni&amp;quot;, &amp;quot;omni&amp;quot;, &amp;quot;herbi&amp;quot;, &amp;quot;omni&amp;quot;, &amp;quot;herbi&amp;quot;, &amp;quot;herbi&amp;quot;,…
## $ order        &amp;lt;chr&amp;gt; &amp;quot;Carnivora&amp;quot;, &amp;quot;Primates&amp;quot;, &amp;quot;Rodentia&amp;quot;, &amp;quot;Soricomorpha&amp;quot;…
## $ conservation &amp;lt;chr&amp;gt; &amp;quot;lc&amp;quot;, NA, &amp;quot;nt&amp;quot;, &amp;quot;lc&amp;quot;, &amp;quot;domesticated&amp;quot;, NA, &amp;quot;vu&amp;quot;, NA,…
## $ sleep_total  &amp;lt;dbl&amp;gt; 12.1, 17.0, 14.4, 14.9, 4.0, 14.4, 8.7, 7.0, 10.1, …
## $ sleep_rem    &amp;lt;dbl&amp;gt; NA, 1.8, 2.4, 2.3, 0.7, 2.2, 1.4, NA, 2.9, NA, 0.6,…
## $ sleep_cycle  &amp;lt;dbl&amp;gt; NA, NA, NA, 0.1333333, 0.6666667, 0.7666667, 0.3833…
## $ awake        &amp;lt;dbl&amp;gt; 11.9, 7.0, 9.6, 9.1, 20.0, 9.6, 15.3, 17.0, 13.9, 2…
## $ brainwt      &amp;lt;dbl&amp;gt; NA, 0.01550, NA, 0.00029, 0.42300, NA, NA, NA, 0.07…
## $ bodywt       &amp;lt;dbl&amp;gt; 50.000, 0.480, 1.350, 0.019, 600.000, 3.850, 20.490…&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;animals &amp;lt;- c(&amp;quot;Asian elephant&amp;quot;, 
             &amp;quot;Little brown bat&amp;quot;,
             &amp;quot;Three-toed sloth&amp;quot;, 
             &amp;quot;Rabbit&amp;quot;, 
             &amp;quot;Giant armadillo&amp;quot;, 
             &amp;quot;Tiger&amp;quot;,
             &amp;quot;Chimpanzee&amp;quot;,
             &amp;quot;Potoroo&amp;quot;,
             &amp;quot;Lion&amp;quot;,
             &amp;quot;Domestic cat&amp;quot;,
             &amp;quot;Pilot whale&amp;quot;,
             &amp;quot;Goat&amp;quot;,
             &amp;quot;Gray seal&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;msleep %&amp;gt;%
  filter(name %in% animals) %&amp;gt;%
  ggplot(aes(reorder(name,sleep_total), sleep_total)) +
  geom_col(width=0.5, fill = &amp;quot;snow1&amp;quot;) +
  geom_text(aes(x = -1.5, y = sleep_total + 0.5, label =  paste0(name, &amp;quot; (&amp;quot;, sleep_total, &amp;quot;)&amp;quot;)), 
            color = &amp;quot;snow1&amp;quot;, 
            hjust = 0, 
            vjust  = 1) +
  geom_segment(aes(x = -1.5, xend = name, y = sleep_total, yend = sleep_total), 
               color = &amp;quot;snow1&amp;quot;, 
               lty = &amp;quot;dotted&amp;quot;) +
  labs(x = &amp;quot;&amp;quot;, y = &amp;quot;&amp;quot;, title = &amp;quot;Total Sleep (Hours)&amp;quot;) +
  theme(panel.background = element_rect(fill = &amp;quot;black&amp;quot;),
        plot.background = element_rect(fill = &amp;quot;black&amp;quot;),
        panel.grid = element_blank(),
        axis.text = element_blank(),
        axis.ticks = element_blank())&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/notes/data-based-labels_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Oxygen desaturations in the early neonatal period predict development of bronchopulmonary dysplasia</title>
      <link>/publication/bd-bpd-pr/</link>
      <pubDate>Mon, 29 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>/publication/bd-bpd-pr/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Heart rate ranges in premature neonates using high resolution physiologic data</title>
      <link>/publication/hrranges/</link>
      <pubDate>Sat, 01 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>/publication/hrranges/</guid>
      <description></description>
    </item>
    
    <item>
      <title>LOLAweb: a containerized web server for interactive genomic locus overlap enrichment analysis</title>
      <link>/publication/lolaweb/</link>
      <pubDate>Wed, 06 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/publication/lolaweb/</guid>
      <description></description>
    </item>
    
    <item>
      <title>epicontacts: Handling, visualisation and analysis of epidemiological contacts</title>
      <link>/publication/epicontacts/</link>
      <pubDate>Thu, 10 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/publication/epicontacts/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Bradycardia and Oxygen Desaturation Events in VLBW infants: Association with BPD and other outcomes</title>
      <link>/publication/bd-pas-2018/</link>
      <pubDate>Thu, 03 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/publication/bd-pas-2018/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Seventh Day Respiratory Acuity Score is a Strong Predictor of BPD in VLBW Infants</title>
      <link>/publication/ras-pas-2018/</link>
      <pubDate>Thu, 03 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/publication/ras-pas-2018/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
