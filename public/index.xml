<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>VP Nagraj on VP Nagraj</title>
    <link>/</link>
    <description>Recent content in VP Nagraj on VP Nagraj</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018</copyright>
    <lastBuildDate>Sun, 17 May 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Web Application for Designing and Conducting Phase I Drug Combination Studies Using the Partial Order Continual Reassessment Method</title>
      <link>/publication/pocrm-sct/</link>
      <pubDate>Sun, 17 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/publication/pocrm-sct/</guid>
      <description></description>
    </item>
    
    <item>
      <title>bcftools Primer</title>
      <link>/notes/bcftools/</link>
      <pubDate>Fri, 28 Feb 2020 18:14:59 +0000</pubDate>
      
      <guid>/notes/bcftools/</guid>
      <description>


&lt;p&gt;&lt;code&gt;bcftools&lt;/code&gt; provides utilities for working with data in variant calling (&lt;code&gt;.vcf&lt;/code&gt;) format. The &lt;a href=&#34;https://samtools.github.io/bcftools/bcftools.html&#34;&gt;manual&lt;/a&gt; fully documents the arguments and features, and the developers have written their own &lt;a href=&#34;https://samtools.github.io/bcftools/howtos/index.html&#34;&gt;“HowTo” page&lt;/a&gt;. The goal of this post is to walk through some scenarios with a reproducible dataset to showcase the &lt;code&gt;bcftools&lt;/code&gt; functionality I use regularly.&lt;/p&gt;
&lt;p&gt;Note that this will &lt;em&gt;not&lt;/em&gt; be an exhaustive demonstration of all &lt;code&gt;bcftools&lt;/code&gt; features, nor will it include other &lt;code&gt;.vcf&lt;/code&gt; parsing/manipulation tools or linux utilities (i.e. &lt;code&gt;awk&lt;/code&gt;, &lt;code&gt;sed&lt;/code&gt;) that can be handy for working with variant calling data.&lt;/p&gt;
&lt;p&gt;The examples should be reproducible given setup described below. However, the output at the command line will look slightly different than the inline output in this post. For legibility, I’ve run each of the commands, exluded the header, and read the results back in as a text file. The inline output in this post will show a max of 6 rows with a final placeholder row (&lt;code&gt;. . . . . . . . . . .&lt;/code&gt;) if necessary.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#concat&#34;&gt;How do I concatenate multiple vcf files?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#samplename&#34;&gt;How do I subset for individual samples by name?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#indels&#34;&gt;How do I restrict a vcf to only include INDELs?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#rsid&#34;&gt;How do I filter a vcf by SNP ID?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#chrpos&#34;&gt;How do I filter a vcf by genomic coordinates?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#tgt&#34;&gt;How do I format the genotype as nucleotide in a vcf?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#merge&#34;&gt;How do I merge multiple vcf files?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#parsemulti&#34;&gt;How do I extract genotypes for multiple samples from a single vcf?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#renamechr&#34;&gt;How do I change the chromosome names in a vcf?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#noheader&#34;&gt;How do I inspect a vcf without the header?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#onlyheader&#34;&gt;How do I view &lt;em&gt;only&lt;/em&gt; the header in a vcf?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;div id=&#34;setup&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;p&gt;To get started we need to find some data to work with and do a bit of pre-processing:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Download all of the files for the &lt;a href=&#34;ftp://ftp.1000genomes.ebi.ac.uk/vol1/ftp/release/&#34;&gt;20130502 release of the 1000 Genomes Project&lt;/a&gt; (these are in compressed &lt;code&gt;.vcf.gz&lt;/code&gt; format, each with &lt;code&gt;.tbi&lt;/code&gt; index)&lt;/li&gt;
&lt;li&gt;Download a &lt;code&gt;.vcf.gz&lt;/code&gt; (and &lt;code&gt;.tbi&lt;/code&gt;) for sites annotated by &lt;a href=&#34;https://www.ncbi.nlm.nih.gov/clinvar/&#34;&gt;ClinVar&lt;/a&gt;&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Create &lt;code&gt;.vcf.gz&lt;/code&gt; files for each chromosome (1-22) filtered to only include the ClinVar sites&lt;/li&gt;
&lt;li&gt;Create tabix index for each of the newly created &lt;code&gt;.vcf.gz&lt;/code&gt; files&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The code that follows will perform all of the steps described above. Keep in mind that the each step (especially downloading and filtering the 1000 Genomes data) may take quite a while as these files are large (~ 20GB total). You’ll need a system with sufficient storage, and has &lt;code&gt;wget&lt;/code&gt;, &lt;code&gt;parallel&lt;/code&gt;, &lt;code&gt;bcftools&lt;/code&gt;, and &lt;code&gt;tabix&lt;/code&gt; installed.&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;## download 1000 genomes vcf files
wget ftp://ftp.1000genomes.ebi.ac.uk/vol1/ftp/release/20130502/*.vcf.gz*

## download clinvar vcf
wget ftp://ftp.ncbi.nlm.nih.gov/pub/clinvar/vcf_GRCh37/clinvar.vcf.gz*

## use parallel to restrict each chromosome (chr1 to chr22) to clinvar sites
find . -type f -name &amp;quot;ALL.chr[1-9]*vcf.gz&amp;quot; | parallel &amp;quot;bcftools view {} -R clinvar.vcf.gz --output-type z --output {}.clinvar.vcf.gz&amp;quot;

## make sure all vcf.gz files are tabix indexed
find . -type f -name &amp;quot;ALL.chr[1-9]*.clinvar.vcf.gz&amp;quot; | parallel &amp;quot;tabix {}&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With the data processed we can move onto the scenarios.&lt;/p&gt;
&lt;p&gt;All subsequent code will use &lt;code&gt;bcftools&lt;/code&gt; version 1.10.&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;bcftools --version&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;text&#34;&gt;&lt;code&gt;bcftools 1.10.2-27-g9d66868
Using htslib 1.10.2-33-g1bbcd02
Copyright (C) 2019 Genome Research Ltd.
License Expat: The MIT/Expat license
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;scenarios&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Scenarios&lt;/h2&gt;
&lt;div id=&#34;concatenate-multiple-files-together&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;a name=&#34;concat&#34;&gt;&lt;/a&gt;Concatenate multiple files together&lt;/h3&gt;
&lt;p&gt;If we wanted to concatenate (i.e. “stack”) mutliple &lt;code&gt;.vcf&lt;/code&gt; files together we can use &lt;code&gt;bcftools concat&lt;/code&gt;, so long as the input files share the same fields. In this example, we’ll combine all of the chromosomes (1-22) into a single file.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;--output-type z&lt;/code&gt; argument specifies that the output will be compressed, and the &lt;code&gt;--output&lt;/code&gt; flag allows us to explicitly name the resulting file:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;bcftools concat ALL.chr*.clinvar.vcf.gz --output-type z --output all.clinvar.vcf.gz&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: &lt;code&gt;bcftools concat&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; equivalent &lt;code&gt;bcftools merge&lt;/code&gt;. For an example of the latter &lt;a href=&#34;#merge&#34;&gt;see below&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;select-individual-samples-by-name&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;a name=&#34;samplename&#34;&gt;&lt;/a&gt;Select individual samples by name&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;bcftools view -s&lt;/code&gt; allows for subsetting by sample ID.&lt;/p&gt;
&lt;p&gt;The combined &lt;code&gt;all.clinvar.vcf.gz&lt;/code&gt; file above contains multiple samples. Here we’ll create individual compressed &lt;code&gt;.vcf&lt;/code&gt; files for NA20536 and HG03718 samples, along with a tabix index for each file (using &lt;code&gt;bcftools index -t&lt;/code&gt;):&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;bcftools view -s NA20536 all.clinvar.vcf.gz --output-type z --output NA20536.clinvar.vcf.gz
bcftools view -s HG03718 all.clinvar.vcf.gz --output-type z --output HG03718.clinvar.vcf.gz

## note: bcftools index -t is equivalent to tabix here
bcftools index -t NA20536.clinvar.vcf.gz
bcftools index -t HG03718.clinvar.vcf.gz&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;filter-to-only-include-indels&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;a name=&#34;indels&#34;&gt;&lt;/a&gt;Filter to only include INDELs&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;bcftools view -v&lt;/code&gt; will restrict the file to specified variant types: “snps”, “indels”, “mnps”, or “other”.&lt;/p&gt;
&lt;p&gt;We can use the command to filter the &lt;code&gt;.vcf&lt;/code&gt; to only include INDELs:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;bcftools view -v indels NA20536.clinvar.vcf.gz&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;CHROM&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;POS&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;ID&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;REF&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;ALT&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;QUAL&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;FILTER&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;INFO&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;FORMAT&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;NA20536&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;978603&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;rs35881187&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CCT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;C&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;100&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PASS&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AC=2;AF=0.479233;AN=2;NS=2504;DP=14705;EAS_AF=0.8036;AMR_AF=0.6412;AFR_AF=0.0348;EUR_AF=0.5487;SAS_AF=0.5593;VT=INDEL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;GT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1|1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;984171&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;rs140904842&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CAG&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;C&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;100&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PASS&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AC=2;AF=0.920527;AN=2;NS=2504;DP=7127;EAS_AF=0.9891;AMR_AF=0.9769;AFR_AF=0.7602;EUR_AF=0.9742;SAS_AF=0.9714;VT=INDEL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;GT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1|1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1168239&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;rs533071750&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;C&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CG&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;100&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PASS&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AC=0;AF=0.000599042;AN=2;NS=2504;DP=9648;EAS_AF=0;AMR_AF=0.0029;AFR_AF=0;EUR_AF=0.001;SAS_AF=0;AA=?|GGGGGGG|GGGGGGGG|unsure;VT=INDEL;EX_TARGET&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;GT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0|0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2343991&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;rs570192538&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CCA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;C&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;100&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PASS&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AC=0;AF=0.00459265;AN=2;NS=2504;DP=9045;EAS_AF=0;AMR_AF=0;AFR_AF=0.0174;EUR_AF=0;SAS_AF=0;VT=INDEL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;GT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0|0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2435830&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;rs555614613&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TTCC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;T&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;100&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PASS&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AC=0;AF=0.00579073;AN=2;NS=2504;DP=15005;EAS_AF=0;AMR_AF=0.0029;AFR_AF=0.0204;EUR_AF=0;SAS_AF=0;VT=INDEL;EX_TARGET&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;GT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0|0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2492946&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;rs149579135&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AG&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;A&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;100&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PASS&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AC=0;AF=0.00359425;AN=2;NS=2504;DP=17775;EAS_AF=0;AMR_AF=0.0014;AFR_AF=0.0129;EUR_AF=0;SAS_AF=0;AA=G|G|-|deletion;VT=INDEL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;GT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0|0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&#34;filter-by-rsid&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;a name=&#34;rsid&#34;&gt;&lt;/a&gt;Filter by rsid&lt;/h3&gt;
&lt;p&gt;With &lt;code&gt;bcftools&lt;/code&gt; you can filter a &lt;code&gt;.vcf&lt;/code&gt; file for certain sites by passing in a file that contains the IDs to be retained.&lt;/p&gt;
&lt;p&gt;Assuming we have the following RSIDs in a file called &lt;code&gt;snps.list&lt;/code&gt;&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&#34;text&#34;&gt;&lt;code&gt;rs145413551
rs34610323
rs79548709
rs371163239
rs148716910
rs374704178&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can use &lt;code&gt;snps.list&lt;/code&gt; to filter with &lt;code&gt;bcftools view&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;bcftools view --include ID==@snps.list NA20536.clinvar.vcf.gz&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;right&#34;&gt;CHROM&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;POS&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;ID&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;REF&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;ALT&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;QUAL&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;FILTER&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;INFO&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;FORMAT&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;NA20536&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;17&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;648546&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;rs34610323&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;C&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;T&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;100&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PASS&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AC=0;AF=0.0159744;AN=2;NS=2504;DP=21874;EAS_AF=0;AMR_AF=0.0058;AFR_AF=0.0575;EUR_AF=0;SAS_AF=0;AA=C|||;VT=SNP;EX_TARGET&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;GT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0|0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;31620566&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;rs145413551&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;G&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;T&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;100&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PASS&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AC=0;AF=0.000199681;AN=2;NS=2504;DP=19652;EAS_AF=0;AMR_AF=0;AFR_AF=0.0008;EUR_AF=0;SAS_AF=0;AA=G|||;VT=SNP;EX_TARGET&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;GT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0|0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;21&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;45707000&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;rs374704178&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;G&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;A&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;100&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PASS&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AC=0;AF=0.000399361;AN=2;NS=2504;DP=11479;EAS_AF=0;AMR_AF=0;AFR_AF=0.0015;EUR_AF=0;SAS_AF=0;AA=G|||;VT=SNP;EX_TARGET&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;GT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0|0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;151721&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;rs148716910&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;G&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;A&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;100&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PASS&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AC=0;AF=0.00279553;AN=2;NS=2504;DP=18789;EAS_AF=0;AMR_AF=0.0014;AFR_AF=0.0098;EUR_AF=0;SAS_AF=0;AA=G|||;VT=SNP;EX_TARGET&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;GT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0|0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1841816&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;rs79548709&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;C&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;T&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;100&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PASS&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AC=0;AF=0.00519169;AN=2;NS=2504;DP=16683;EAS_AF=0;AMR_AF=0;AFR_AF=0.0197;EUR_AF=0;SAS_AF=0;AA=C|||;VT=SNP;EX_TARGET&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;GT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0|0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3889458&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;rs371163239&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;T&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;A&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;100&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PASS&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AC=0;AF=0.000199681;AN=2;NS=2504;DP=15669;EAS_AF=0;AMR_AF=0.0014;AFR_AF=0;EUR_AF=0;SAS_AF=0;AA=T|||;VT=SNP;EX_TARGET&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;GT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0|0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&#34;filter-by-chromosome-andor-position&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;a name=&#34;chrpos&#34;&gt;&lt;/a&gt;Filter by chromosome and/or position&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;--regions&lt;/code&gt; flag takes input chromosome and/or position coordinates to filter the &lt;code&gt;.vcf&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If we wanted to restrict to chromosome 5:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;bcftools view --regions 5 NA20536.vcf.gz &lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;CHROM&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;POS&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;ID&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;REF&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;ALT&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;QUAL&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;FILTER&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;INFO&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;FORMAT&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;NA20536&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;40417&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;esv3603720;esv3603721&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;G&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;CN0&gt;,&lt;CN2&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;100&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PASS&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AC=0,0;AF=0.000199681,0.000798722;AN=2;CS=DUP_uwash;END=176437;NS=2504;SVTYPE=CNV;DP=16231;EAS_AF=0,0;AMR_AF=0,0;AFR_AF=0,0;EUR_AF=0,0.003;SAS_AF=0.001,0.001;VT=SV;EX_TARGET&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;GT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0|0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;124186&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;esv3603731&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;T&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;CN2&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;100&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PASS&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AC=0;AF=0.000199681;AN=2;CS=DUP_gs;END=163795;NS=2504;SVTYPE=DUP;DP=19153;EAS_AF=0;AMR_AF=0;AFR_AF=0;EUR_AF=0.001;SAS_AF=0;VT=SV;EX_TARGET&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;GT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0|0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;143490&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;rs142208662&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;C&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;T&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;100&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PASS&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AC=0;AF=0.00279553;AN=2;NS=2504;DP=19664;EAS_AF=0;AMR_AF=0.0014;AFR_AF=0.0098;EUR_AF=0;SAS_AF=0;AA=c|||;VT=SNP;EX_TARGET&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;GT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0|0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;151721&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;rs148716910&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;G&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;A&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;100&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PASS&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AC=0;AF=0.00279553;AN=2;NS=2504;DP=18789;EAS_AF=0;AMR_AF=0.0014;AFR_AF=0.0098;EUR_AF=0;SAS_AF=0;AA=G|||;VT=SNP;EX_TARGET&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;GT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0|0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;156288&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;rs193920840&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;C&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;T&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;100&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PASS&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AC=0;AF=0.000199681;AN=2;NS=2504;DP=17617;EAS_AF=0;AMR_AF=0;AFR_AF=0;EUR_AF=0;SAS_AF=0.001;AA=C|||;VT=SNP;EX_TARGET&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;GT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0|0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;162045&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;rs568109142&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;G&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;A&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;100&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PASS&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AC=0;AF=0.000199681;AN=2;NS=2504;DP=15391;EAS_AF=0.001;AMR_AF=0;AFR_AF=0;EUR_AF=0;SAS_AF=0;AA=G|||;VT=SNP;EX_TARGET&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;GT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0|0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;And if we were interested in a speficic region (let’s say chromosome 10, anywhere between positions 800000:900000):&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;bcftools view --regions 10:800000-900000 NA20536.clinvar.vcf.gz&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;right&#34;&gt;CHROM&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;POS&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;ID&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;REF&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;ALT&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;QUAL&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;FILTER&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;INFO&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;FORMAT&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;NA20536&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;859076&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;rs144565605&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;T&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;C&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;100&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PASS&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AC=0;AF=0.000199681;AN=2;NS=2504;DP=15608;EAS_AF=0;AMR_AF=0;AFR_AF=0.0008;EUR_AF=0;SAS_AF=0;AA=T|||;VT=SNP;EX_TARGET&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;GT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0|0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;860990&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;rs144883024&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;G&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;A&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;100&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PASS&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AC=0;AF=0.00259585;AN=2;NS=2504;DP=18990;EAS_AF=0;AMR_AF=0.0014;AFR_AF=0.0091;EUR_AF=0;SAS_AF=0;AA=G|||;VT=SNP;EX_TARGET&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;GT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0|0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;871816&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;rs79707128&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;T&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;A&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;100&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PASS&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AC=0;AF=0.0211661;AN=2;NS=2504;DP=21039;EAS_AF=0;AMR_AF=0.0058;AFR_AF=0.0703;EUR_AF=0;SAS_AF=0.0092;AA=T|||;VT=SNP;EX_TARGET&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;GT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0|0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&#34;format-translated-genotype-output&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;a name=&#34;tgt&#34;&gt;&lt;/a&gt;Format translated genotype output&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;bcftools query&lt;/code&gt; will output contents of the &lt;code&gt;.vcf&lt;/code&gt; in text format. The contents can be specified in a string that includes fields to extract, separators, and line endings.&lt;/p&gt;
&lt;p&gt;In this scenario, we’ll pull out the ID (RSID), chromosome, position, a translated genotype, and the “type” (SNP, INDEL, etc.) in tab-separated format:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;bcftools query -f &amp;quot;%ID\t%CHROM\t%POS[\t%TGT]\t%TYPE\n&amp;quot; NA20536.clinvar.vcf.gz&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;ID&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;CHROM&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;POS&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;GT&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;TYPE&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;rs41285790&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;865628&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;G|G&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;SNP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;rs113383096&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;879481&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;G|G&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;SNP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;rs112433394&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;880944&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;G|G&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;SNP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;rs113226136&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;887409&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;G|G&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;SNP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;rs112966263&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;887989&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;A|A&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;SNP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;rs58931985&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;889450&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;C|C&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;SNP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&#34;merge-vcf-files-together&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;a name=&#34;merge&#34;&gt;&lt;/a&gt;Merge vcf files together&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;bcftools merge&lt;/code&gt; will combine data from multiple files.&lt;/p&gt;
&lt;p&gt;To merge individual sample &lt;code&gt;.vcf&lt;/code&gt; files into one:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;bcftools merge NA20536.clinvar.vcf.gz HG03718.clinvar.vcf.gz --output-type z --output NA20536.HG03718.clinvar.vcf.gz&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;CHROM&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;POS&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;ID&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;REF&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;ALT&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;QUAL&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;FILTER&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;INFO&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;FORMAT&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;NA20536&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;HG03718&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;865628&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;rs41285790&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;G&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;A&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;100&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PASS&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NS=2504;AA=g|||;VT=SNP;EX_TARGET;DP=33950;AF=0.00279553;EAS_AF=0;AMR_AF=0.0072;AFR_AF=0;EUR_AF=0.005;SAS_AF=0.0041;AN=4;AC=0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;GT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0|0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0|0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;879481&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;rs113383096&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;G&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;C&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;100&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PASS&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NS=2504;AA=g|||;VT=SNP;EX_TARGET;DP=27530;AF=0.0197684;EAS_AF=0;AMR_AF=0.0058;AFR_AF=0.0719;EUR_AF=0;SAS_AF=0;AN=4;AC=0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;GT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0|0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0|0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;880944&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;rs112433394&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;G&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;A&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;100&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PASS&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NS=2504;AA=g|||;VT=SNP;EX_TARGET;DP=41446;AF=0.00259585;EAS_AF=0;AMR_AF=0;AFR_AF=0.0098;EUR_AF=0;SAS_AF=0;AN=4;AC=0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;GT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0|0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0|0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;887409&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;rs113226136&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;G&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;C&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;100&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PASS&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NS=2504;AA=g|||;VT=SNP;EX_TARGET;DP=39832;AF=0.00119808;EAS_AF=0;AMR_AF=0;AFR_AF=0.0045;EUR_AF=0;SAS_AF=0;AN=4;AC=0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;GT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0|0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0|0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;887989&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;rs112966263&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;A&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;G&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;100&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PASS&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NS=2504;AA=G|||;VT=SNP;EX_TARGET;DP=36768;AF=0.00579073;EAS_AF=0;AMR_AF=0;AFR_AF=0.0219;EUR_AF=0;SAS_AF=0;AN=4;AC=0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;GT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0|0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0|0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;889450&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;rs58931985&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;C&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;A&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;100&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PASS&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NS=2504;AA=C|||;VT=SNP;EX_TARGET;DP=32298;AF=0.00159744;EAS_AF=0;AMR_AF=0;AFR_AF=0.0061;EUR_AF=0;SAS_AF=0;AN=4;AC=0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;GT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0|0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0|0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&#34;parse-genotypes-for-multiple-samples&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;a name=&#34;parsemulti&#34;&gt;&lt;/a&gt;Parse genotypes for multiple samples&lt;/h3&gt;
&lt;p&gt;Given that you have a mutli-sample &lt;code&gt;.vcf&lt;/code&gt; you can parse genotypes for each individual:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;bcftools query -f &amp;#39;[%CHROM\t%POS\t%SAMPLE\t%TGT\n]&amp;#39; NA20536.HG03718.clinvar.vcf.gz&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;CHROM&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;POS&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;SAMPLE&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;GT&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;865628&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA20536&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;G|G&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;865628&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;HG03718&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;G|G&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;879481&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA20536&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;G|G&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;879481&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;HG03718&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;G|G&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;880944&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA20536&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;G|G&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;880944&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;HG03718&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;G|G&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&#34;edit-chromosome-names&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;a name=&#34;renamechr&#34;&gt;&lt;/a&gt;Edit chromosome names&lt;/h3&gt;
&lt;p&gt;You can rename chromosomes with &lt;code&gt;bcftools annotate --rename-chrs&lt;/code&gt;. The command requires that you supply a tab-separated file with the desired naming convention, organized as “old\tnew”:&lt;/p&gt;
&lt;pre class=&#34;txt&#34;&gt;&lt;code&gt;1\tchr1
2\tchr2
3\tchr3
4\tchr4
5\tchr5
6\tchr6
7\tchr7
8\tchr8
9\tchr9
10\tchr10
11\tchr11
12\tchr12
13\tchr13
14\tchr14
15\tchr15
16\tchr16
17\tchr17
18\tchr18
19\tchr19
20\tchr20
21\tchr21
22\tchr22&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;bcftools annotate --rename-chrs chromosomes.txt NA20536.clinvar.vcf.gz&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;CHROM&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;POS&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;ID&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;REF&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;ALT&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;QUAL&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;FILTER&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;INFO&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;FORMAT&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;NA20536&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;chr1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;865628&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;rs41285790&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;G&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;A&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;100&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PASS&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AC=0;AF=0.00279553;AN=2;NS=2504;DP=16975;EAS_AF=0;AMR_AF=0.0072;AFR_AF=0;EUR_AF=0.005;SAS_AF=0.0041;AA=g|||;VT=SNP;EX_TARGET&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;GT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0|0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;chr1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;879481&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;rs113383096&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;G&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;C&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;100&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PASS&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AC=0;AF=0.0197684;AN=2;NS=2504;DP=13765;EAS_AF=0;AMR_AF=0.0058;AFR_AF=0.0719;EUR_AF=0;SAS_AF=0;AA=g|||;VT=SNP;EX_TARGET&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;GT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0|0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;chr1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;880944&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;rs112433394&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;G&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;A&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;100&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PASS&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AC=0;AF=0.00259585;AN=2;NS=2504;DP=20723;EAS_AF=0;AMR_AF=0;AFR_AF=0.0098;EUR_AF=0;SAS_AF=0;AA=g|||;VT=SNP;EX_TARGET&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;GT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0|0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;chr1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;887409&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;rs113226136&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;G&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;C&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;100&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PASS&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AC=0;AF=0.00119808;AN=2;NS=2504;DP=19916;EAS_AF=0;AMR_AF=0;AFR_AF=0.0045;EUR_AF=0;SAS_AF=0;AA=g|||;VT=SNP;EX_TARGET&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;GT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0|0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;chr1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;887989&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;rs112966263&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;A&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;G&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;100&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PASS&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AC=0;AF=0.00579073;AN=2;NS=2504;DP=18384;EAS_AF=0;AMR_AF=0;AFR_AF=0.0219;EUR_AF=0;SAS_AF=0;AA=G|||;VT=SNP;EX_TARGET&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;GT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0|0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;chr1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;889450&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;rs58931985&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;C&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;A&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;100&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PASS&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AC=0;AF=0.00159744;AN=2;NS=2504;DP=16149;EAS_AF=0;AMR_AF=0;AFR_AF=0.0061;EUR_AF=0;SAS_AF=0;AA=C|||;VT=SNP;EX_TARGET&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;GT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0|0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&#34;view-without-header&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;a name=&#34;noheader&#34;&gt;&lt;/a&gt;View without header&lt;/h3&gt;
&lt;p&gt;To view &lt;em&gt;only the results without header&lt;/em&gt; (i.e. remove the header) use the &lt;code&gt;-H&lt;/code&gt; flag:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;bcftools view -H NA20536.HG03718.clinvar.vcf.gz&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;X1&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;X2&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;X3&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;X4&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;X5&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;X6&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;X7&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;X8&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;X9&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;X10&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;X11&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;865628&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;rs41285790&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;G&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;A&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;100&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PASS&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NS=2504;AA=g|||;VT=SNP;EX_TARGET;DP=33950;AF=0.00279553;EAS_AF=0;AMR_AF=0.0072;AFR_AF=0;EUR_AF=0.005;SAS_AF=0.0041;AN=4;AC=0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;GT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0|0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0|0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;879481&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;rs113383096&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;G&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;C&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;100&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PASS&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NS=2504;AA=g|||;VT=SNP;EX_TARGET;DP=27530;AF=0.0197684;EAS_AF=0;AMR_AF=0.0058;AFR_AF=0.0719;EUR_AF=0;SAS_AF=0;AN=4;AC=0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;GT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0|0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0|0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;880944&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;rs112433394&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;G&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;A&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;100&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PASS&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NS=2504;AA=g|||;VT=SNP;EX_TARGET;DP=41446;AF=0.00259585;EAS_AF=0;AMR_AF=0;AFR_AF=0.0098;EUR_AF=0;SAS_AF=0;AN=4;AC=0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;GT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0|0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0|0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;887409&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;rs113226136&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;G&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;C&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;100&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PASS&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NS=2504;AA=g|||;VT=SNP;EX_TARGET;DP=39832;AF=0.00119808;EAS_AF=0;AMR_AF=0;AFR_AF=0.0045;EUR_AF=0;SAS_AF=0;AN=4;AC=0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;GT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0|0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0|0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;887989&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;rs112966263&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;A&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;G&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;100&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PASS&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NS=2504;AA=G|||;VT=SNP;EX_TARGET;DP=36768;AF=0.00579073;EAS_AF=0;AMR_AF=0;AFR_AF=0.0219;EUR_AF=0;SAS_AF=0;AN=4;AC=0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;GT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0|0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0|0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;889450&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;rs58931985&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;C&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;A&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;100&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PASS&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NS=2504;AA=C|||;VT=SNP;EX_TARGET;DP=32298;AF=0.00159744;EAS_AF=0;AMR_AF=0;AFR_AF=0.0061;EUR_AF=0;SAS_AF=0;AN=4;AC=0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;GT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0|0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0|0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&#34;view-only-header&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;a name=&#34;onlyheader&#34;&gt;&lt;/a&gt;View only header&lt;/h3&gt;
&lt;p&gt;To view &lt;em&gt;only the header&lt;/em&gt; (i.e. extract header) use the &lt;code&gt;-h&lt;/code&gt; flag:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;bcftools view -h clinvar.vcf.gz&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ##fileformat=VCFv4.1
## ##FILTER=&amp;lt;ID=PASS,Description=&amp;quot;All filters passed&amp;quot;&amp;gt;
## ##fileDate=2020-02-17
## ##source=ClinVar
## ##reference=GRCh37
## ##ID=&amp;lt;Description=&amp;quot;ClinVar Variation ID&amp;quot;&amp;gt;
## ##INFO=&amp;lt;ID=AF_ESP,Number=1,Type=Float,Description=&amp;quot;allele frequencies from GO-ESP&amp;quot;&amp;gt;
## ##INFO=&amp;lt;ID=AF_EXAC,Number=1,Type=Float,Description=&amp;quot;allele frequencies from ExAC&amp;quot;&amp;gt;
## ##INFO=&amp;lt;ID=AF_TGP,Number=1,Type=Float,Description=&amp;quot;allele frequencies from TGP&amp;quot;&amp;gt;
## ##INFO=&amp;lt;ID=ALLELEID,Number=1,Type=Integer,Description=&amp;quot;the ClinVar Allele ID&amp;quot;&amp;gt;
## ##INFO=&amp;lt;ID=CLNDN,Number=.,Type=String,Description=&amp;quot;ClinVar&amp;#39;s preferred disease name for the concept specified by disease identifiers in CLNDISDB&amp;quot;&amp;gt;
## ##INFO=&amp;lt;ID=CLNDNINCL,Number=.,Type=String,Description=&amp;quot;For included Variant : ClinVar&amp;#39;s preferred disease name for the concept specified by disease identifiers in CLNDISDB&amp;quot;&amp;gt;
## ##INFO=&amp;lt;ID=CLNDISDB,Number=.,Type=String,Description=&amp;quot;Tag-value pairs of disease database name and identifier, e.g. OMIM:NNNNNN&amp;quot;&amp;gt;
## ##INFO=&amp;lt;ID=CLNDISDBINCL,Number=.,Type=String,Description=&amp;quot;For included Variant: Tag-value pairs of disease database name and identifier, e.g. OMIM:NNNNNN&amp;quot;&amp;gt;
## ##INFO=&amp;lt;ID=CLNHGVS,Number=.,Type=String,Description=&amp;quot;Top-level (primary assembly, alt, or patch) HGVS expression.&amp;quot;&amp;gt;
## ##INFO=&amp;lt;ID=CLNREVSTAT,Number=.,Type=String,Description=&amp;quot;ClinVar review status for the Variation ID&amp;quot;&amp;gt;
## ##INFO=&amp;lt;ID=CLNSIG,Number=.,Type=String,Description=&amp;quot;Clinical significance for this single variant&amp;quot;&amp;gt;
## ##INFO=&amp;lt;ID=CLNSIGCONF,Number=.,Type=String,Description=&amp;quot;Conflicting clinical significance for this single variant&amp;quot;&amp;gt;
## ##INFO=&amp;lt;ID=CLNSIGINCL,Number=.,Type=String,Description=&amp;quot;Clinical significance for a haplotype or genotype that includes this variant. Reported as pairs of VariationID:clinical significance.&amp;quot;&amp;gt;
## ##INFO=&amp;lt;ID=CLNVC,Number=1,Type=String,Description=&amp;quot;Variant type&amp;quot;&amp;gt;
## ##INFO=&amp;lt;ID=CLNVCSO,Number=1,Type=String,Description=&amp;quot;Sequence Ontology id for variant type&amp;quot;&amp;gt;
## ##INFO=&amp;lt;ID=CLNVI,Number=.,Type=String,Description=&amp;quot;the variant&amp;#39;s clinical sources reported as tag-value pairs of database and variant identifier&amp;quot;&amp;gt;
## ##INFO=&amp;lt;ID=DBVARID,Number=.,Type=String,Description=&amp;quot;nsv accessions from dbVar for the variant&amp;quot;&amp;gt;
## ##INFO=&amp;lt;ID=GENEINFO,Number=1,Type=String,Description=&amp;quot;Gene(s) for the variant reported as gene symbol:gene id. The gene symbol and id are delimited by a colon (:) and each pair is delimited by a vertical bar (|)&amp;quot;&amp;gt;
## ##INFO=&amp;lt;ID=MC,Number=.,Type=String,Description=&amp;quot;comma separated list of molecular consequence in the form of Sequence Ontology ID|molecular_consequence&amp;quot;&amp;gt;
## ##INFO=&amp;lt;ID=ORIGIN,Number=.,Type=String,Description=&amp;quot;Allele origin. One or more of the following values may be added: 0 - unknown; 1 - germline; 2 - somatic; 4 - inherited; 8 - paternal; 16 - maternal; 32 - de-novo; 64 - biparental; 128 - uniparental; 256 - not-tested; 512 - tested-inconclusive; 1073741824 - other&amp;quot;&amp;gt;
## ##INFO=&amp;lt;ID=RS,Number=.,Type=String,Description=&amp;quot;dbSNP ID (i.e. rs number)&amp;quot;&amp;gt;
## ##INFO=&amp;lt;ID=SSR,Number=1,Type=Integer,Description=&amp;quot;Variant Suspect Reason Codes. One or more of the following values may be added: 0 - unspecified, 1 - Paralog, 2 - byEST, 4 - oldAlign, 8 - Para_EST, 16 - 1kg_failed, 1024 - other&amp;quot;&amp;gt;
## ##contig=&amp;lt;ID=1&amp;gt;
## ##contig=&amp;lt;ID=2&amp;gt;
## ##contig=&amp;lt;ID=3&amp;gt;
## ##contig=&amp;lt;ID=4&amp;gt;
## ##contig=&amp;lt;ID=5&amp;gt;
## ##contig=&amp;lt;ID=6&amp;gt;
## ##contig=&amp;lt;ID=7&amp;gt;
## ##contig=&amp;lt;ID=8&amp;gt;
## ##contig=&amp;lt;ID=9&amp;gt;
## ##contig=&amp;lt;ID=10&amp;gt;
## ##contig=&amp;lt;ID=11&amp;gt;
## ##contig=&amp;lt;ID=12&amp;gt;
## ##contig=&amp;lt;ID=13&amp;gt;
## ##contig=&amp;lt;ID=14&amp;gt;
## ##contig=&amp;lt;ID=15&amp;gt;
## ##contig=&amp;lt;ID=16&amp;gt;
## ##contig=&amp;lt;ID=17&amp;gt;
## ##contig=&amp;lt;ID=18&amp;gt;
## ##contig=&amp;lt;ID=19&amp;gt;
## ##contig=&amp;lt;ID=20&amp;gt;
## ##contig=&amp;lt;ID=21&amp;gt;
## ##contig=&amp;lt;ID=22&amp;gt;
## ##contig=&amp;lt;ID=X&amp;gt;
## ##contig=&amp;lt;ID=Y&amp;gt;
## ##contig=&amp;lt;ID=MT&amp;gt;
## ##bcftools_viewVersion=1.10.2-27-g9d66868+htslib-1.10.2-33-g1bbcd02
## ##bcftools_viewCommand=view -h clinvar.vcf.gz; Date=Fri Feb 28 19:06:40 2020
## #CHROM   POS ID  REF ALT QUAL    FILTER  INFO&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;From &lt;a href=&#34;https://www.ncbi.nlm.nih.gov/variation/docs/ClinVar_vcf_files/&#34;&gt;ClinVar vcf documentation&lt;/a&gt;: &lt;em&gt;This file contains variations submitted through clinical channels. The variations contained in this file are therefore a mixture of variations asserted to be pathogenic as well as those known to be non-pathogenic. The user should note that any variant may have different assertions regarding clinical significance and that this file will contain only those that are the most “pathogenic”&lt;/em&gt;.&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;This solution is based on a Biostars post: &lt;a href=&#34;https://www.biostars.org/p/373852/&#34; class=&#34;uri&#34;&gt;https://www.biostars.org/p/373852/&lt;/a&gt;&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Custom Table Function in bash</title>
      <link>/notes/table-shell-function/</link>
      <pubDate>Thu, 20 Feb 2020 17:14:59 +0000</pubDate>
      
      <guid>/notes/table-shell-function/</guid>
      <description>


&lt;p&gt;The bash &lt;code&gt;cat&lt;/code&gt; command will output the contents of a text file. If the text is tabular (i.e. rows and columns), the output will include delimiters. That may be informative, but sometimes it is helpful to view the output more legibly.&lt;/p&gt;
&lt;div id=&#34;t2&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;code&gt;t2&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;t2()&lt;/code&gt; is a custom function that uses &lt;code&gt;cat&lt;/code&gt; and &lt;code&gt;column&lt;/code&gt; to output the contents of a text file in a consistent (tab-separated) format regardless of the original delimiter. The function is defined such that as a default it will look for comma (&lt;code&gt;,&lt;/code&gt;), tab (&lt;code&gt;\t&lt;/code&gt;), and semicolon (&lt;code&gt;;&lt;/code&gt;) delimiters. The first argument is the file name to be parsed. If there is a second argument passed, it will override the default delimiters.&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;t2 () {
  
  if [[ -n &amp;quot;$2&amp;quot; ]]
    then
      local sep=$2
    else
      local sep=&amp;quot;,$&amp;#39;\t&amp;#39;$&amp;#39;;&amp;#39;&amp;quot;
  fi
  
  cat &amp;quot;$1&amp;quot; | column -t -s $sep;

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;examples&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Examples&lt;/h2&gt;
&lt;p&gt;To motivate usage, first create tabular text files with different delimiters. The data used here will be a the first 5 rows of the built-in &lt;code&gt;ToothGrowth&lt;/code&gt; data in R.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(readr)

littletooth &amp;lt;- head(ToothGrowth, n=5)

## comma separated
write_csv(littletooth, &amp;quot;littletooth.csv&amp;quot;)
## semi-colon separated
write_delim(littletooth, &amp;quot;littletooth.semi&amp;quot;, delim = &amp;quot;;&amp;quot;)
## pipe separated
write_delim(littletooth, &amp;quot;littletooth.pipe&amp;quot;, delim = &amp;quot;|&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s see what the &lt;code&gt;.csv&lt;/code&gt; output looks like with &lt;code&gt;cat&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;cat littletooth.csv&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;text&#34;&gt;&lt;code&gt;len,supp,dose
4.2,VC,0.5
11.5,VC,0.5
7.3,VC,0.5
5.8,VC,0.5
6.4,VC,0.5&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;t2&lt;/code&gt; standardizes output format regardless of delimiter:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;t2 littletooth.csv&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;text&#34;&gt;&lt;code&gt;len   supp  dose
4.2   VC    0.5
11.5  VC    0.5
7.3   VC    0.5
5.8   VC    0.5
6.4   VC    0.5&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;t2 littletooth.semi&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;text&#34;&gt;&lt;code&gt;len   supp  dose
4.2   VC    0.5
11.5  VC    0.5
7.3   VC    0.5
5.8   VC    0.5
6.4   VC    0.5&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;t2 littletooth.pipe &amp;quot;|&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;text&#34;&gt;&lt;code&gt;len   supp  dose
4.2   VC    0.5
11.5  VC    0.5
7.3   VC    0.5
5.8   VC    0.5
6.4   VC    0.5&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: The &lt;code&gt;t2&lt;/code&gt; function is useful for “pretty-printing” … from &lt;code&gt;man column&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;text&#34;&gt;&lt;code&gt;     -t      Determine the number of columns the input contains and create a ta-
             ble.  Columns are delimited with whitespace, by default, or with the
             characters supplied using the -s option.  Useful for pretty-printing
             displays.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you were to redirect output to a file, the contents would &lt;em&gt;not&lt;/em&gt; be tab-separated.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>tmux Basics</title>
      <link>/notes/tmux-basics/</link>
      <pubDate>Tue, 11 Feb 2020 08:38:31 -0400</pubDate>
      
      <guid>/notes/tmux-basics/</guid>
      <description>


&lt;blockquote&gt;
&lt;p&gt;tmux is a terminal multiplexer for Unix-like operating systems. It allows multiple terminal sessions to be accessed simultaneously in a single window. It is useful for running more than one command-line program at the same time. It can also be used to detach processes from their controlling terminals, allowing SSH sessions to remain active without being visible.&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There are a lot of great cheatsheets, demos, and resources for how to use &lt;code&gt;tmux&lt;/code&gt;&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;a href=&#34;#fn3&#34; class=&#34;footnote-ref&#34; id=&#34;fnref3&#34;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;a href=&#34;#fn4&#34; class=&#34;footnote-ref&#34; id=&#34;fnref4&#34;&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In general &lt;code&gt;tmux&lt;/code&gt; can help manage three components:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sessions&lt;/li&gt;
&lt;li&gt;windows&lt;/li&gt;
&lt;li&gt;panes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What follows will be a series of commands that starts a session with &lt;code&gt;ping&lt;/code&gt;, the &lt;code&gt;tmux&lt;/code&gt; clock, and &lt;code&gt;htop&lt;/code&gt; running with the pane layout customized to look like the following:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/tmux.png&#34; /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Start a new tmux session called “demo”:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;tmux new-session -s demo&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Start running ping:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ping stackoverflow.com&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Split vertically to create a second pane:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ctrl-b&lt;/code&gt; + &lt;code&gt;%&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Start the big clock:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ctrl-b&lt;/code&gt; + &lt;code&gt;t&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Split horizontally to create a third pane:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ctrl-b&lt;/code&gt; + &lt;code&gt;&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Do something else (in this case open htop):&lt;/p&gt;
&lt;p&gt;&lt;code&gt;htop&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Resize the pane beneath the clock:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ctrl-b&lt;/code&gt; + &lt;code&gt;:resize-pane -U 5&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Remove the pane beneath the clock:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ctrl-b&lt;/code&gt; + &lt;code&gt;x&lt;/code&gt; + &lt;code&gt;y&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Detach from the session:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ctrl-b&lt;/code&gt; + &lt;code&gt;:detach&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Kill the session altogether:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;tmux kill-session -t demo&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;From &lt;a href=&#34;https://en.wikipedia.org/wiki/Tmux&#34;&gt;tmux&lt;/a&gt; by &lt;a href=&#34;https://en.wikipedia.org/&#34;&gt;Wikipedia&lt;/a&gt; licensed under &lt;a href=&#34;https://creativecommons.org/licenses/by-sa/3.0/us/&#34;&gt;CC BY-SA 3.0&lt;/a&gt;.&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://gist.github.com/MohamedAlaa/2961058&#34; class=&#34;uri&#34;&gt;https://gist.github.com/MohamedAlaa/2961058&lt;/a&gt;&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn3&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://medium.com/@bill.feng/how-to-tmux-2136b663df45&#34; class=&#34;uri&#34;&gt;https://medium.com/@bill.feng/how-to-tmux-2136b663df45&lt;/a&gt;&lt;a href=&#34;#fnref3&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn4&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://linuxize.com/post/getting-started-with-tmux/&#34; class=&#34;uri&#34;&gt;https://linuxize.com/post/getting-started-with-tmux/&lt;/a&gt;&lt;a href=&#34;#fnref4&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>rstudio::conf 2020</title>
      <link>/notes/rstudioconf2020/</link>
      <pubDate>Fri, 31 Jan 2020 17:14:59 +0000</pubDate>
      
      <guid>/notes/rstudioconf2020/</guid>
      <description>


&lt;p&gt;This past January I was able to attend &lt;a href=&#34;https://blog.rstudio.com/2019/07/15/rstudio-conf-2020/&#34;&gt;rstudio::conf 2020&lt;/a&gt;&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; in San Francisco. I was there for the full week, taking the &lt;strong&gt;Applied Machine Learning&lt;/strong&gt; workshop and attending as many of the main conference program sessions as possible.&lt;/p&gt;
&lt;p&gt;Here is a collection of highlights/takeaways from the conference:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#debug-with-browser&#34;&gt;Debugging with &lt;code&gt;browser()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#tech-debt&#34;&gt;Technical Debt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#tunneling&#34;&gt;Tunneling with &lt;em&gt;tidyeval&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ggplot-null&#34;&gt;&lt;code&gt;ggplot + NULL&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#plumber&#34;&gt;&lt;code&gt;plumber&lt;/code&gt; for building APIs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#pins-package&#34;&gt;&lt;code&gt;pins&lt;/code&gt; package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#bslib&#34;&gt;&lt;code&gt;boostraplib&lt;/code&gt; package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#rolldown&#34;&gt;&lt;code&gt;rolldown&lt;/code&gt; output&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;div id=&#34;debugging-with-browser&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;a name=&#34;debug-with-browser&#34;&gt;Debugging with &lt;code&gt;browser()&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://speakerdeck.com/jennybc/object-of-type-closure-is-not-subsettable&#34;&gt;Jenny Bryan’s &lt;strong&gt;Object of Type Closure Is Not Subsettable&lt;/strong&gt;&lt;/a&gt; was one of my favorite talks at the conference. My debugging practices have been … crude, at best. I wish I would have taken the time to learn about some of the tools she covered a &lt;em&gt;long&lt;/em&gt; time ago.&lt;/p&gt;
&lt;p&gt;Moving forward I’ll definitely be using &lt;code&gt;browser()&lt;/code&gt;. When you drop it in inside a function, you can step through each call in the stack until it fails or succeeds. Along the way you can interactively update objects in the function environment to test fixes.&lt;/p&gt;
&lt;p&gt;An example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## define our function
fix_me &amp;lt;- function(.data) {
  x &amp;lt;- head(.data)
  y &amp;lt;- colSums(x)
  x[which.max(y),]
}

## try it with a data.frame
fix_me(mtcars)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##             mpg cyl disp hp drat   wt  qsec vs am gear carb
## Datsun 710 22.8   4  108 93 3.85 2.32 18.61  1  1    4    1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## now try it with a vector
## doesn&amp;#39;t work :(
fix_me(1:3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Error in colSums(x): &amp;#39;x&amp;#39; must be an array of at least two dimensions&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## add in call to browser() to see where it breaks
fix_me &amp;lt;- function(.data) {
  browser()
  x &amp;lt;- head(.data)
  y &amp;lt;- colSums(x)
  x[which.max(y),]
}

## run again to prompt browser
fix_me(1:3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## add in logic and messaging for dim check
fix_me &amp;lt;- function(.data) {
  if(is.null(dim(.data))) {
    stop(&amp;quot;Your argument to `.data` must have at least 2 dimensions (columns and rows).&amp;quot;)
  }
  x &amp;lt;- head(.data)
  y &amp;lt;- colSums(x)
  x[which.max(y),]
}

## still doesn&amp;#39;t work :(
## but now it at least issues a message!
fix_me(1:3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Error in fix_me(1:3): Your argument to `.data` must have at least 2 dimensions (columns and rows).&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## and this still works!
fix_me(mtcars)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##             mpg cyl disp hp drat   wt  qsec vs am gear carb
## Datsun 710 22.8   4  108 93 3.85 2.32 18.61  1  1    4    1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
&lt;a href=&#34;https://resources.rstudio.com/rstudio-conf-2020/object-of-type-closure-is-not-subsettable-jenny-bryan?wvideo=3eryv8gcor&#34;&gt;Object of type ‘closure’ is not subsettable - Jenny Bryan&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://resources.rstudio.com/rstudio-conf-2020/object-of-type-closure-is-not-subsettable-jenny-bryan?wvideo=3eryv8gcor&#34;&gt;&lt;img src=&#34;https://embedwistia-a.akamaihd.net/deliveries/2e2c4f025a70aaa1659fa66786570766f9f0f11a.jpg?image_play_button_size=2x&amp;amp;image_crop_resized=960x540&amp;amp;image_play_button=1&amp;amp;image_play_button_color=4287c7e0&#34; width=&#34;400&#34; height=&#34;225&#34; style=&#34;width: 400px; height: 225px;&#34;&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;technical-debt&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;a name=&#34;tech-debt&#34;&gt;Technical Debt&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/GShotwell/technical_debt&#34;&gt;Gordon Shotwell’s talk&lt;/a&gt; might have been the least technical and most important talk I saw at rstudio::conf. Technical debt abounds. There’s no doubt that my own development practices have led to more work for folks (including myself) down the line. It’s easy to take shortcuts in documentation, testing, and up-front efforts when scoping a project. It’s even easier to be cynical or blame a former maintainer (including yourself) for these shortcomings. But as Gordon pointed out, &lt;strong&gt;technical debt is a good sign&lt;/strong&gt; … if there is a motivation to salvage, refactor, or otherwise optimize a codebase, then it means the underlying ideas hold value. The talk outlined a number of ways to avoid and/or remedy technical debt. One suggestion: build tools that are fun to use. Gordon gave the example of R markdown’s ability to give new users two very important features:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Ease-of-use&lt;/li&gt;
&lt;li&gt;Path to mastery&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
&lt;a href=&#34;https://resources.rstudio.com/rstudio-conf-2020/technical-debt-is-a-social-problem-gordon-shotwell-2?wvideo=4ne2qh57f4&#34;&gt;Technical Debt is a Social Problem - Mr. Gordon Shotwell&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://resources.rstudio.com/rstudio-conf-2020/technical-debt-is-a-social-problem-gordon-shotwell-2?wvideo=4ne2qh57f4&#34;&gt;&lt;img src=&#34;https://embed-fastly.wistia.com/deliveries/a156fcdda7809f78507dd3c55f2d6a23.webp&#34; width=&#34;400&#34; height=&#34;225&#34; style=&#34;width: 400px; height: 225px;&#34;&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;tunneling-with-tidyeval&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;a name=&#34;tunneling&#34;&gt;Tunneling with &lt;em&gt;tidyeval&lt;/em&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Lionel Henry’s talk reviewed the history, design, and current features &lt;em&gt;tidyeval&lt;/em&gt; (i.e. masking) in R. The new feature that resonated most with me was the “tunneling” syntax with &lt;code&gt;{{ variable }}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The code below outlines a simple use-case where we want to use &lt;code&gt;dplyr&lt;/code&gt; syntax in a function that can accept &lt;em&gt;bare&lt;/em&gt; variable names as arguments. This example function (&lt;code&gt;most()&lt;/code&gt;) will try to find the maximum value for a given variable, stratified by a category:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## make sure dplyr is loaded
## NOTE: dplyr includes the starwars dataset
library(dplyr)

## define function *without* tunneling 
most &amp;lt;- function(.data, var, by) {
  .data %&amp;gt;%
    group_by(by) %&amp;gt;%
    summarise(max(var, na.rm = TRUE)) %&amp;gt;%
    arrange(desc(var))
}

## this should produce an error ...
most(starwars, height, species)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Error: Column `by` is unknown&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## try defining the function with tunneling
most &amp;lt;- function(.data, var, by = NULL) {
  .data %&amp;gt;%
    group_by({{ by }}) %&amp;gt;%
    summarise(max({{ var }}, na.rm = TRUE)) %&amp;gt;%
    arrange(desc({{ var }}))
}

## still getting an error? ...
most(starwars, height, species)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Error in ~height: object &amp;#39;height&amp;#39; not found&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## make sure we&amp;#39;re passing in tunneled name for the summarise variable we create
most &amp;lt;- function(.data, var, by = NULL) {
  .data %&amp;gt;%
    group_by({{ by }}) %&amp;gt;%
    summarise({{ var }} := max({{ var }}, na.rm = TRUE)) %&amp;gt;%
    arrange(desc({{ var }}))
}

## works !
most(starwars, height, species)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 38 x 2
##    species  height
##    &amp;lt;chr&amp;gt;     &amp;lt;int&amp;gt;
##  1 Quermian    264
##  2 Wookiee     234
##  3 Kaminoan    229
##  4 Gungan      224
##  5 Kaleesh     216
##  6 Pau&amp;#39;an      206
##  7 Human       202
##  8 Droid       200
##  9 Besalisk    198
## 10 Cerean      198
## # … with 28 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the Q&amp;amp;A Lionel clarified that the tunneling syntax meant to make tidyeval easier for folks to use … and will not necessarily supersede or replace the existing &lt;code&gt;quo&lt;/code&gt;, &lt;code&gt;enquo&lt;/code&gt;, &lt;code&gt;!!&lt;/code&gt;, etc features.&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://resources.rstudio.com/rstudio-conf-2020/interactivity-and-programming-in-the-tidyverse-lionel-henry?wvideo=bvpm9z2tdf&#34;&gt;Interactivity and Programming in the Tidyverse - Lionel Henry&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://resources.rstudio.com/rstudio-conf-2020/interactivity-and-programming-in-the-tidyverse-lionel-henry?wvideo=bvpm9z2tdf&#34;&gt;&lt;img src=&#34;https://embedwistia-a.akamaihd.net/deliveries/d00e2f6f28cf4d4cc5ab402bb7e89530.jpg?image_play_button_size=2x&amp;amp;image_crop_resized=960x540&amp;amp;image_play_button=1&amp;amp;image_play_button_color=4287c7e0&#34; width=&#34;400&#34; height=&#34;225&#34; style=&#34;width: 400px; height: 225px;&#34;&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;ggplot-null&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;a name=&#34;ggplot-null&#34;&gt;&lt;code&gt;ggplot + NULL&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I didn’t know that adding &lt;code&gt;NULL&lt;/code&gt; to a &lt;code&gt;ggplot2&lt;/code&gt; layer would produce the same plot as if it weren’t added at all:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggplot2)

p &amp;lt;-
  ggplot(msleep, aes(name, sleep_total)) +
  geom_col() +
  coord_polar()

q &amp;lt;-
  ggplot(msleep, aes(name, sleep_total)) +
  geom_col() +
  coord_polar() +
  NULL

all.equal(p,q)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Dewey Dunnington pointed this out in the context of tips for programming with &lt;code&gt;ggplot2&lt;/code&gt;. As an example, if you were writing your own function you might add an option for facetting but still maintain the same API:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## define polar plot
polar_plot &amp;lt;- function(.data, x, y, by = NULL) {
  
  if(!is.null(by)) {
    facet &amp;lt;- facet_wrap(~ .data[[by]])
  } else {
    facet &amp;lt;- NULL
  }
  
  ggplot(.data, aes(.data[[x]], .data[[y]])) +
    geom_col() +
    coord_polar() +
    facet
}

## works !
polar_plot(msleep, &amp;quot;name&amp;quot;, &amp;quot;sleep_total&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/notes/rstudioconf2020_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## works !
polar_plot(msleep, &amp;quot;name&amp;quot;, &amp;quot;sleep_total&amp;quot;, by = &amp;quot;vore&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/notes/rstudioconf2020_files/figure-html/unnamed-chunk-6-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Given the notes around &lt;em&gt;tidyeval&lt;/em&gt; above, it’s worth pointing out that the method Dewey used (&lt;code&gt;.data[[&amp;quot;variable&amp;quot;]]&lt;/code&gt;) does &lt;em&gt;not&lt;/em&gt; allow for bare variable names.&lt;/p&gt;
&lt;p&gt;Could we use the tunneling approach to do that? Kind of …&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## define polar_plot() with tunneling
polar_plot &amp;lt;- function(.data, x, y, by = NULL) {
  
  if(!is.null(by)) {
    facet &amp;lt;- facet_wrap(~ {{ by }})
  } else {
    facet &amp;lt;- NULL
  }
  
  ggplot(.data, aes({{x}}, {{y}})) +
    geom_col() +
    coord_polar() +
    facet
}

## works !
polar_plot(msleep, name, sleep_total)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/notes/rstudioconf2020_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## doesn&amp;#39;t work :(
polar_plot(msleep, name, sleep_total, vore)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Error in polar_plot(msleep, name, sleep_total, vore): object &amp;#39;vore&amp;#39; not found&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The second call to the function doesn’t work. Where is this breaking? &lt;code&gt;if(!is.null(by)&lt;/code&gt; … thanks &lt;code&gt;browser()&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;To get this working we probably need to dive deeper into &lt;a href=&#34;https://rlang.r-lib.org/reference/quasiquotation.html&#34;&gt;quasiquotation&lt;/a&gt;. Maybe a topic for another post …&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://resources.rstudio.com/rstudio-conf-2020/best-practices-for-programming-with-ggplot2-dewey-dunnington?wvideo=t2plmmey43&#34;&gt;Best practices for programming with ggplot2 - Dewey Dunnington&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://resources.rstudio.com/rstudio-conf-2020/best-practices-for-programming-with-ggplot2-dewey-dunnington?wvideo=t2plmmey43&#34;&gt;&lt;img src=&#34;https://embedwistia-a.akamaihd.net/deliveries/4bcc97a2edf5b0a53da27ec1fa5072a8.jpg?image_play_button_size=2x&amp;amp;image_crop_resized=960x540&amp;amp;image_play_button=1&amp;amp;image_play_button_color=4287c7e0&#34; width=&#34;400&#34; height=&#34;225&#34; style=&#34;width: 400px; height: 225px;&#34;&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;plumber-for-building-apis&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;a name=&#34;plumber&#34;&gt;&lt;code&gt;plumber&lt;/code&gt; for building APIs&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.rplumber.io/&#34;&gt;&lt;code&gt;plumber&lt;/code&gt;&lt;/a&gt; came up several in several talks.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;plumber allows you to create a REST API by merely decorating your existing R source code with special comments.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The example below uses the following procedure:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Fit a model and save it to an R object&lt;/li&gt;
&lt;li&gt;Write &lt;code&gt;plumber&lt;/code&gt; code that loads model and defines API endpoints&lt;/li&gt;
&lt;li&gt;Run the API locally at port &lt;code&gt;8000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Query the API with &lt;code&gt;curl&lt;/code&gt; to return predicted value&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)
library(AmesHousing)

ames &amp;lt;- make_ames()

ames_train &amp;lt;-
  ames %&amp;gt;%
  select(Sale_Price, Gr_Liv_Area, Year_Built, Central_Air)

ames_fit &amp;lt;- lm(Sale_Price ~ ., data  = ames_train)
save(ames_fit, file = &amp;quot;ames_fit.rda&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# plumber.R
load(&amp;quot;ames_fit.rda&amp;quot;)

#* Echo back the input
#* @param msg The message to echo
#* @get /echo
function(msg=&amp;quot;&amp;quot;){
  list(msg = paste0(&amp;quot;The message is: &amp;#39;&amp;quot;, msg, &amp;quot;&amp;#39;&amp;quot;))
}

#* Return r squared
#* @get /rsq
function(){
  summary(ames_fit)$r.squared
}

#* Return the predicted sale price in dollars
#* @param area The total area of home in square feet
#* @param year The year the home was built
#* @param ac Whether or not the home has Central Air (&amp;quot;Y&amp;quot; or &amp;quot;N&amp;quot;)
#* @post /predict
function(area, year, ac){
  newdata &amp;lt;- 
    data.frame(Gr_Liv_Area = as.numeric(area),
               Year_Built = as.numeric(year),
               Central_Air = ac)
  
  predict(ames_fit, newdata = newdata)[[1]]
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(plumber)
ames_api &amp;lt;- plumb(&amp;quot;plumber.R&amp;quot;)  # Where &amp;#39;plumber.R&amp;#39; is the location of the file shown
ames_api$run(port=8000)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;curl -X POST &amp;quot;http://127.0.0.1:8000/predict?ac=Y&amp;amp;year=1990&amp;amp;area=20000&amp;quot; -H  &amp;quot;accept: application/json&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
&lt;a href=&#34;https://resources.rstudio.com/rstudio-conf-2020/practical-plumber-patterns-james-blair?wvideo=93tbn5tkic&#34;&gt;Practical Plumber Patterns - James Blair&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://resources.rstudio.com/rstudio-conf-2020/practical-plumber-patterns-james-blair?wvideo=93tbn5tkic&#34;&gt;&lt;img src=&#34;https://embedwistia-a.akamaihd.net/deliveries/32b4d8b1558500d4cc005a41c54227a624c6cd5f.jpg?image_play_button_size=2x&amp;amp;image_crop_resized=960x540&amp;amp;image_play_button=1&amp;amp;image_play_button_color=4287c7e0&#34; width=&#34;400&#34; height=&#34;225&#34; style=&#34;width: 400px; height: 225px;&#34;&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;pins-package&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;a name=&#34;pins-package&#34;&gt;&lt;code&gt;pins&lt;/code&gt; package&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://pins.rstudio.com/&#34;&gt;&lt;code&gt;pins&lt;/code&gt;&lt;/a&gt; is a relatively new package for caching and retrieving objects. I heard about it in Alex Gold’s &lt;strong&gt;Deploying End-To-End Data Science with Shiny, Plumber, and Pins&lt;/strong&gt; talk. As he pointed out, pins are good for things you can re-create. The workflow doesn’t necessarily obviate the need for a database / file structure to store data of record. But it can be useful for quickly retrieving model objects or large datasets that are shared across multiple analyses.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(pins)

## create some sample data
rvalues &amp;lt;-
  data.frame(
    key = sample(LETTERS, size = 1e7, replace = TRUE),
    value = rnbinom(1e7, prob = 0.1, size = 1)
  )

## two concepts: &amp;quot;pins&amp;quot; and &amp;quot;boards&amp;quot;
## pins are data objects
## boards are storage locations

## what board are available
board_list()

## you can also add new boards with board_register_* functions
## e.g. board_register_local(); board_register_s3(); board_register_github()

## here we&amp;#39;ll use the &amp;quot;local&amp;quot; board
pin(rvalues, board = &amp;quot;local&amp;quot;)
## remove the object from the local environment to prove this is working
rm(rvalues)
## retrieve the object
pin_get(&amp;quot;rvalues&amp;quot;)
## the above ^ doesn&amp;#39;t store it in the environment though
## assign the values to an object
rvalues &amp;lt;- pin_get(&amp;quot;rvalues&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
&lt;a href=&#34;https://resources.rstudio.com/rstudio-conf-2020/deploying-end-to-end-data-science-with-shiny-plumber-and-pins-alex-gold?wvideo=nqnwoujit0&#34;&gt;Deploying End-To-End Data Science with Shiny, Plumber, and Pins - Alex Gold&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://resources.rstudio.com/rstudio-conf-2020/deploying-end-to-end-data-science-with-shiny-plumber-and-pins-alex-gold?wvideo=nqnwoujit0&#34;&gt;&lt;img src=&#34;https://embedwistia-a.akamaihd.net/deliveries/619365e14b7191a4f7f4955bbedb6ea6.jpg?image_play_button_size=2x&amp;amp;image_crop_resized=960x540&amp;amp;image_play_button=1&amp;amp;image_play_button_color=4287c7e0&#34; width=&#34;400&#34; height=&#34;225&#34; style=&#34;width: 400px; height: 225px;&#34;&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;bootstraplib-package&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;a name=&#34;bslib&#34;&gt;&lt;code&gt;bootstraplib&lt;/code&gt; package&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Joe Cheng introduced a new package called &lt;a href=&#34;https://github.com/rstudio/bootstraplib&#34;&gt;&lt;code&gt;bootstraplib&lt;/code&gt;&lt;/a&gt;, which is aimed at making it easier to style Shiny app R markdown html output via Sass and CSS variables. There’s also an interactive theming / color picker UI&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://camo.githubusercontent.com/aec7d2cc30e91cc72d654d708397dbff17c09c08/68747470733a2f2f692e696d6775722e636f6d2f696c366e64384a2e676966&#34; /&gt;&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://resources.rstudio.com/rstudio-conf-2020/styling-shiny-apps-with-sass-and-bootstrap-4-joe-cheng?wvideo=906lcaj2mi&#34;&gt;Styling Shiny apps with Sass and Bootstrap 4 - Joe Cheng&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://resources.rstudio.com/rstudio-conf-2020/styling-shiny-apps-with-sass-and-bootstrap-4-joe-cheng?wvideo=906lcaj2mi&#34;&gt;&lt;img src=&#34;https://embedwistia-a.akamaihd.net/deliveries/7f29bc9b76f72e738fd23db117341cc1.jpg?image_play_button_size=2x&amp;amp;image_crop_resized=960x540&amp;amp;image_play_button=1&amp;amp;image_play_button_color=4287c7e0&#34; width=&#34;400&#34; height=&#34;225&#34; style=&#34;width: 400px; height: 225px;&#34;&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;rolldown-output&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;a name=&#34;rolldown&#34;&gt;&lt;code&gt;rolldown&lt;/code&gt; output&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Yihui Xie delivered an inspiring blitz through 14 R markdown demos. One of the output formats that was new to me was &lt;a href=&#34;https://github.com/yihui/rolldown&#34;&gt;&lt;code&gt;rolldown&lt;/code&gt;&lt;/a&gt;, which wraps a “storytelling” format implemented in JavaScript called &lt;a href=&#34;https://github.com/russellgoldenberg/scrollama&#34;&gt;Scrollama&lt;/a&gt;. With this package you can fix output to stay in the center of the html document, while the code and chunks of text scroll down the side. The package includes a &lt;a href=&#34;https://cran.r-project.org/web/packages/rolldown/vignettes/scrollama-sidebar.html&#34;&gt;vignette with this sidebar layout as an example&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Another bonus for me was learning about &lt;code&gt;rmarkdown::draft()&lt;/code&gt;. This function stubs out an R markdown document from scratch or from a template:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## stub out templated rolldown file
rmarkdown::draft(&amp;quot;draft.Rmd&amp;quot;, 
                 template = &amp;quot;scrollama-sidebar&amp;quot;, 
                 package = &amp;quot;rolldown&amp;quot;,
                 edit = FALSE)

## stub out templated rolldown file AND interactively edit
rmarkdown::draft(&amp;quot;draft2.Rmd&amp;quot;, 
                 template = &amp;quot;scrollama-sidebar&amp;quot;, 
                 package = &amp;quot;rolldown&amp;quot;,
                 edit = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
&lt;a href=&#34;https://resources.rstudio.com/rstudio-conf-2020/one-r-markdown-document-fourteen-demosyihui-xie?wvideo=aj3deolth1&#34;&gt;One R Markdown Document, Fourteen Demos - Yihui Xie&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://resources.rstudio.com/rstudio-conf-2020/one-r-markdown-document-fourteen-demosyihui-xie?wvideo=aj3deolth1&#34;&gt;&lt;img src=&#34;https://embedwistia-a.akamaihd.net/deliveries/995470d4b099ae9b3421014c31c22716.jpg?image_play_button_size=2x&amp;amp;image_crop_resized=960x539&amp;amp;image_play_button=1&amp;amp;image_play_button_color=4287c7e0&#34; width=&#34;400&#34; height=&#34;225&#34; style=&#34;width: 400px; height: 225px;&#34;&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;&lt;a href=&#34;/notes/rstudioconf2019/&#34;&gt;rstudio::conf 2019 recap&lt;/a&gt;&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;Image borrowed from &lt;a href=&#34;https://github.com/rstudio/bootstraplib/blob/master/README.md&#34;&gt;&lt;code&gt;boostraplib&lt;/code&gt; README&lt;/a&gt;&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Create a GIF with R</title>
      <link>/notes/gifs-in-r/</link>
      <pubDate>Wed, 27 Nov 2019 08:38:31 -0400</pubDate>
      
      <guid>/notes/gifs-in-r/</guid>
      <description>


&lt;p&gt;With R you can turn a collection of images into an animated GIF. That can be useful for animating plots or for converting a series of arbitrary image files (not created in R) into an animation. The following will include examples of both use-cases, with a reproducible demo of the former.&lt;/p&gt;
&lt;p&gt;The tool used in the example that follows is the &lt;code&gt;magick&lt;/code&gt; R package, which is a wrapper for the &lt;a href=&#34;https://www.imagemagick.org/Magick++/STL.html&#34;&gt;ImageMagick library&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The first example involves animating plots that are created in R. To motivate this example we’re using a built-in dataset from ggplot2 (&lt;code&gt;txhousing&lt;/code&gt;), which details historical residential property sales/listings in Texas by county between 2000-2015:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(ggplot2::txhousing)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 9
##   city     year month sales   volume median listings inventory  date
##   &amp;lt;chr&amp;gt;   &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
## 1 Abilene  2000     1    72  5380000  71400      701       6.3 2000 
## 2 Abilene  2000     2    98  6505000  58700      746       6.6 2000.
## 3 Abilene  2000     3   130  9285000  58100      784       6.8 2000.
## 4 Abilene  2000     4    98  9730000  68600      785       6.9 2000.
## 5 Abilene  2000     5   141 10590000  67300      794       6.8 2000.
## 6 Abilene  2000     6   156 13910000  66900      780       6.6 2000.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The code below will prepare the data for plotting, then loop through all of the 16 years in the dataset and create barplots of total sales each month for every year. These plots will be written to disk as static &lt;code&gt;.png&lt;/code&gt; files.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(magick)
library(ggplot2)
library(dplyr)
library(tidyr)

## create a directory to which the images will be written
dir_out &amp;lt;- file.path(tempdir(), &amp;quot;tx-sales&amp;quot;)
dir.create(dir_out, recursive = TRUE)

## prepare data
tx_sales &amp;lt;-
  txhousing %&amp;gt;%
  group_by(year,month) %&amp;gt;%
  summarise(sales = sum(sales, na.rm = TRUE)) %&amp;gt;%
  ungroup() %&amp;gt;%
  mutate(month = factor(month, labels = month.name)) %&amp;gt;%
  complete(month,year)

## get a sorted list of unique years in the TX housing dataset
years &amp;lt;- 
  tx_sales %&amp;gt;%
  pull(year) %&amp;gt;%
  unique(.) %&amp;gt;%
  sort(.)

## find the month with the most houses sold to set y axis limit
most_sold &amp;lt;- max(tx_sales$sales, na.rm = TRUE)

## loop through years ...
## subset data ...
## create barplot of sales by month for each year ...
## write plot to file
for (y in years) {
  
  p &amp;lt;-
    tx_sales %&amp;gt;%
    filter(year == y) %&amp;gt;%
    ggplot(aes(month,sales)) +
    geom_col() +
    scale_y_continuous(limits = c(0, most_sold), breaks = seq(0,1e5, by = 5000)) +
    theme_minimal() +
    labs(x = &amp;quot;Month&amp;quot;, y = &amp;quot;Total Properties Sold&amp;quot;, title = y)
  
  fp &amp;lt;- file.path(dir_out, paste0(y, &amp;quot;.png&amp;quot;))
  
  ggsave(plot = p, 
         filename = fp, 
         device = &amp;quot;png&amp;quot;)

}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With the plots written to disk (there should be 16 &lt;code&gt;.png&lt;/code&gt; files in this example), we can now use &lt;code&gt;magick&lt;/code&gt; to read in the image data and stitch it all together in an animation.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## list file names and read in
imgs &amp;lt;- list.files(dir_out, full.names = TRUE)
img_list &amp;lt;- lapply(imgs, image_read)

## join the images together
img_joined &amp;lt;- image_join(img_list)

## animate at 2 frames per second
img_animated &amp;lt;- image_animate(img_joined, fps = 2)

## view animated image
img_animated

## save to disk
image_write(image = img_animated,
            path = &amp;quot;tx-sales.gif&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/img/tx-sales.gif&#34; /&gt;&lt;/p&gt;
&lt;p&gt;To be clear … the example above is contrived to reproducibly demonstrate the &lt;code&gt;magick&lt;/code&gt; functionse.&lt;/p&gt;
&lt;p&gt;Another (maybe more straightforward) approach to the example outlined above would be to use &lt;code&gt;gganimate&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(gganimate)

tx_sales %&amp;gt;%
  ggplot(aes(month,sales)) +
  geom_col() +
  scale_y_continuous(limits = c(0, most_sold), breaks = seq(0,1e5, by = 5000)) +
  theme_minimal() +
  ## gganimate functionality starts here
  labs(x = &amp;quot;Month&amp;quot;, y = &amp;quot;Total Properties Sold&amp;quot;, title = &amp;quot;{frame_time}&amp;quot;) +
  transition_time(year) +
  ease_aes(&amp;quot;linear&amp;quot;)

anim_save(&amp;quot;tx-sales-gganimate.gif&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/img/tx-sales-gganimate.gif&#34; /&gt;&lt;/p&gt;
&lt;p&gt;But note that these GIFs are not identical. &lt;code&gt;gganimate&lt;/code&gt; transitions the the plot between years in a way that makes the bars expand and contract smoothly. That may or may not be the desired effect. &lt;code&gt;ease_aes()&lt;/code&gt; can customize this behavior but it will likely be different than the GIF created with &lt;code&gt;magick&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;More importantly, the &lt;code&gt;magick&lt;/code&gt; method for creating a GIF can be extended to cases when the images are &lt;em&gt;not&lt;/em&gt; created in R. For example, the GIF below was created using a similar set of steps (&lt;code&gt;image_read() %&amp;gt;% image_join() %&amp;gt;% image_animate()&lt;/code&gt;) on list of screenshots.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/dps_demo.gif&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Evidence From a Multistate Cohort: Enrollment in Affordable Care Act Qualified Health Plans&#39; Association With Viral Suppression</title>
      <link>/publication/adap-qhp/</link>
      <pubDate>Mon, 18 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>/publication/adap-qhp/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Blood pressure ranges via non-invasive and invasive monitoring techniques in premature neonates using high resolution physiologic data</title>
      <link>/publication/bpranges/</link>
      <pubDate>Sat, 16 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>/publication/bpranges/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Evidence from a Multistate Cohort: Enrollment in Affordable Care Act Qualified Health Plans Results in Viral Suppression</title>
      <link>/publication/adap-qhp-idweek/</link>
      <pubDate>Thu, 03 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>/publication/adap-qhp-idweek/</guid>
      <description></description>
    </item>
    
    <item>
      <title>bash Aliases</title>
      <link>/notes/useful-aliases/</link>
      <pubDate>Sat, 21 Sep 2019 08:38:31 -0400</pubDate>
      
      <guid>/notes/useful-aliases/</guid>
      <description>


&lt;p&gt;Aliases are great. Typing takes time, and a little shorthand for common &lt;code&gt;bash&lt;/code&gt; commands can save more than a few keystrokes. Time saving aside … investigating flags to bake into an alias can be illuminating. The breadth of options to most of my go-to command line tools never ceases to amaze me. And, at least in my experience, many times the default incantation isn’t necessarily the best.&lt;/p&gt;
&lt;p&gt;Here are a few aliases that I find useful.&lt;/p&gt;
&lt;div id=&#34;c&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;code&gt;c&lt;/code&gt;&lt;/h3&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;alias c=&amp;quot;clear&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Simple shorthand … but &lt;code&gt;c&lt;/code&gt; is definitely a time saver, especially considering how many times I find myself &lt;code&gt;clear&lt;/code&gt;-ing the window each day.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;wcl&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;code&gt;wcl&lt;/code&gt;&lt;/h3&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;alias wcl=&amp;quot;wc -l&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;wcl&lt;/code&gt; will return the number of lines in file. This can be helpful for debugging (i.e. when the length of expected output is known) an output file or input from a &lt;code&gt;|&lt;/code&gt;. It also may be worth considering something like &lt;code&gt;alias wcc=&#39;wc -c&#39;&lt;/code&gt; to get file size in bytes.&lt;/p&gt;
&lt;p&gt;From &lt;code&gt;man wc&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;text&#34;&gt;&lt;code&gt;     -l      The number of lines in each input file is written to the standard
             output.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;ll&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;code&gt;ll&lt;/code&gt;&lt;/h3&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;alias ll=&amp;quot;ls -lathp&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Listing contents of a directory with &lt;code&gt;ls&lt;/code&gt; doesn’t show file size/permissions or hidden files. A “long list” (&lt;code&gt;ls -la&lt;/code&gt;) will include&lt;/p&gt;
&lt;p&gt;From &lt;code&gt;man ls&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;text&#34;&gt;&lt;code&gt;     -l      (The lowercase letter ``ell&amp;#39;&amp;#39;.)  List in long format.  (See
             below.)  If the output is to a terminal, a total sum for all the
             file sizes is output on a line before the long listing.
     -a      Include directory entries whose names begin with a dot (.).
     -t      Sort by time modified (most recently modified first) before sort-
             ing the operands by lexicographical order.
     -h      When used with the -l option, use unit suffixes: Byte, Kilobyte,
             Megabyte, Gigabyte, Terabyte and Petabyte in order to reduce the
             number of digits to three or less using base 2 for sizes.
     -p      Write a slash (`/&amp;#39;) after each filename if that file is a direc-
             tory.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;gitlog&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;code&gt;gitlog&lt;/code&gt;&lt;/h3&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;alias gitlog=&amp;quot;git log --graph --pretty=format:&amp;#39;%d %Cred%h%Creset - %C(yellow)%s%Creset %Cgreen(%cr) %C(bold blue)&amp;lt;%an&amp;gt;%Creset&amp;#39;&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;While it may not be the canonical way to do things (&lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Basics-Git-Aliases&#34;&gt;&lt;code&gt;git&lt;/code&gt; has its own concept of aliases&lt;/a&gt;), I like having aliased &lt;code&gt;git&lt;/code&gt; commands side-by-side with my &lt;code&gt;bash&lt;/code&gt; aliases. The &lt;code&gt;git log&lt;/code&gt; command takes a &lt;a href=&#34;https://git-scm.com/docs/pretty-formats/1.8.2&#34;&gt;formatting string&lt;/a&gt;. You can selectively display commit information and even color code fields. The &lt;code&gt;--graph&lt;/code&gt; (graph-ical) option represents the commit history as a list.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/gitlog-1.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;And you can still use other options to &lt;code&gt;git log&lt;/code&gt; too (i.e. &lt;code&gt;gitlog -n 5&lt;/code&gt; to just display info for the last 5 commits).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/gitlog-2.png&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;dps&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;code&gt;dps&lt;/code&gt;&lt;/h3&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;alias dps=&amp;quot;watch -n1 \&amp;quot;docker ps --format &amp;#39;table {{.ID}}\t{{.Names}}\t{{.Image}}\t{{.RunningFor}}&amp;#39;\&amp;quot;&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This might fall more into the category of one-liner than alias … but I recently found a way to constantly monitor the status of Docker containers. I made an alias that uses the &lt;a href=&#34;https://superuser.com/questions/276701/using-the-watch-command-with-an-argument-that-contains-quotes&#34;&gt;&lt;code&gt;watch&lt;/code&gt; command&lt;/a&gt; on &lt;code&gt;docker -ps&lt;/code&gt; with a formatting string specifying the info I want to view for the running container(s). When I’m doing development work with Docker I keep this running in a &lt;code&gt;tmux&lt;/code&gt; pane so I can see when containers start/stop running.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/dps_demo.gif&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Get Filename Without Extension</title>
      <link>/notes/filename-no-extension/</link>
      <pubDate>Fri, 20 Sep 2019 08:38:31 -0400</pubDate>
      
      <guid>/notes/filename-no-extension/</guid>
      <description>


&lt;p&gt;Filenames are rarely arbitrary. They’re usually descriptive and sometimes contain useful data. You can use some basic &lt;code&gt;bash&lt;/code&gt; file manipulation utilities to parse filenames for analysis or store them as variables.&lt;/p&gt;
&lt;p&gt;Take for example a file named &lt;code&gt;computer.blue&lt;/code&gt; in a directory called &lt;code&gt;prince/&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;prince/computer.blue&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we wanted to get the filename(s) of anything in the &lt;code&gt;prince/&lt;/code&gt; folder we could list (&lt;code&gt;ls&lt;/code&gt;) the contents of the directory:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;ls prince/&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## computer.blue&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But what if we wanted the name of the file &lt;em&gt;without&lt;/em&gt; the extension?&lt;/p&gt;
&lt;p&gt;One &lt;a href=&#34;https://stackoverflow.com/questions/2664740/extract-file-basename-without-path-and-extension-in-bash&#34;&gt;SO post&lt;/a&gt; offers the following solution:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;f=prince/computer.blue
echo ${f##*/}
f=${f##*/}
echo ${f%.blue}
echo ${f%.*}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## computer.blue
## computer
## computer&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The code above stores the filename and directory in a variable (&lt;code&gt;f&lt;/code&gt;) and then uses subsequent &lt;a href=&#34;http://tldp.org/LDP/LG/issue18/bash.html&#34;&gt;string substitution expressions&lt;/a&gt; to pull out the file name without extension.&lt;/p&gt;
&lt;p&gt;If you’re using &lt;code&gt;bash&lt;/code&gt; (and not another shell) then you could also rely on the &lt;code&gt;basename&lt;/code&gt; function to do something similar.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;man basename&lt;/code&gt; describes the “suffix” argument:&lt;/p&gt;
&lt;pre class=&#34;text&#34;&gt;&lt;code&gt;BASENAME(1)               BSD General Commands Manual              BASENAME(1)

NAME
     basename, dirname -- return filename or directory portion of pathname

SYNOPSIS
     basename string [suffix]
     basename [-a] [-s suffix] string [...]
     dirname string

DESCRIPTION
     The basename utility deletes any prefix ending with the last slash `/&amp;#39;
     character present in string (after first stripping trailing slashes), and
     a suffix, if given.  The suffix is not stripped if it is identical to the
     remaining characters in string.  The resulting filename is written to the
     standard output.  A non-existent suffix is ignored.  If -a is specified,
     then every argument is treated as a string as if basename were invoked
     with just one argument.  If -s is specified, then the suffix is taken as
     its argument, and all other arguments are treated as a string.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So (given you’re on a system with the external &lt;code&gt;basename&lt;/code&gt; function available) the following should work too:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;basename -s .blue prince/computer.blue&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## computer&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Recovery from bradycardia and desaturation events at 32 weeks corrected age and NICU length of stay: an indicator of physiologic resilience?</title>
      <link>/publication/late-bd/</link>
      <pubDate>Thu, 04 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>/publication/late-bd/</guid>
      <description></description>
    </item>
    
    <item>
      <title>ROC Curves in R</title>
      <link>/notes/plot-roc/</link>
      <pubDate>Sun, 30 Jun 2019 17:14:59 +0000</pubDate>
      
      <guid>/notes/plot-roc/</guid>
      <description>


&lt;blockquote&gt;
&lt;p&gt;A receiver operating characteristic curve, or ROC curve, is a graphical plot that illustrates the diagnostic ability of a binary classifier system as its discrimination threshold is varied.&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There is plenty of available information on how to plot ROC curves in R:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.revolutionanalytics.com/2016/08/roc-curves-in-two-lines-of-code.html&#34; class=&#34;uri&#34;&gt;https://blog.revolutionanalytics.com/2016/08/roc-curves-in-two-lines-of-code.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/plotROC/vignettes/examples.html&#34; class=&#34;uri&#34;&gt;https://cran.r-project.org/web/packages/plotROC/vignettes/examples.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://campus.datacamp.com/courses/machine-learning-with-tree-based-models-in-r/boosted-trees?ex=12&#34; class=&#34;uri&#34;&gt;https://campus.datacamp.com/courses/machine-learning-with-tree-based-models-in-r/boosted-trees?ex=12&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=qcvAqAH60Yw&#34; class=&#34;uri&#34;&gt;https://www.youtube.com/watch?v=qcvAqAH60Yw&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A 2019 RViews post compares different methods side-by-side:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://rviews.rstudio.com/2019/03/01/some-r-packages-for-roc-curves/&#34; class=&#34;uri&#34;&gt;https://rviews.rstudio.com/2019/03/01/some-r-packages-for-roc-curves/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The example that follows provides a documented method I have used to plot ROC curves, both with the &lt;code&gt;pROC&lt;/code&gt; package alone … and also using data from the &lt;code&gt;pROC&lt;/code&gt; ROC AUC object and &lt;code&gt;ggplot2&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;First, some code for to prepare the data (the &lt;code&gt;Titanic&lt;/code&gt; dataset in this case) for modeling:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)

expand_counts &amp;lt;- function(.data, freq_col) {
  
  quo_freq &amp;lt;- dplyr::enquo(freq_col)
  
  freqs &amp;lt;- dplyr::pull(.data, !!quo_freq)
  
  ind &amp;lt;- rep(seq_len(nrow(.data)), freqs)
  
  # Drop count column
  .data &amp;lt;- dplyr::select(.data, - !!quo_freq)
  
  # Get the rows from x
  .data[ind, ]
  
}

titanic &amp;lt;-
  as.data.frame(Titanic, stringsAsFactors = FALSE) %&amp;gt;%
  expand_counts(Freq) %&amp;gt;%
  mutate(Survived = ifelse(Survived == &amp;quot;Yes&amp;quot;, 1, 0))

as.data.frame(Titanic)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Class    Sex   Age Survived Freq
## 1    1st   Male Child       No    0
## 2    2nd   Male Child       No    0
## 3    3rd   Male Child       No   35
## 4   Crew   Male Child       No    0
## 5    1st Female Child       No    0
## 6    2nd Female Child       No    0
## 7    3rd Female Child       No   17
## 8   Crew Female Child       No    0
## 9    1st   Male Adult       No  118
## 10   2nd   Male Adult       No  154
## 11   3rd   Male Adult       No  387
## 12  Crew   Male Adult       No  670
## 13   1st Female Adult       No    4
## 14   2nd Female Adult       No   13
## 15   3rd Female Adult       No   89
## 16  Crew Female Adult       No    3
## 17   1st   Male Child      Yes    5
## 18   2nd   Male Child      Yes   11
## 19   3rd   Male Child      Yes   13
## 20  Crew   Male Child      Yes    0
## 21   1st Female Child      Yes    1
## 22   2nd Female Child      Yes   13
## 23   3rd Female Child      Yes   14
## 24  Crew Female Child      Yes    0
## 25   1st   Male Adult      Yes   57
## 26   2nd   Male Adult      Yes   14
## 27   3rd   Male Adult      Yes   75
## 28  Crew   Male Adult      Yes  192
## 29   1st Female Adult      Yes  140
## 30   2nd Female Adult      Yes   80
## 31   3rd Female Adult      Yes   76
## 32  Crew Female Adult      Yes   20&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sample_n(titanic, 10)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Class    Sex   Age Survived
## 1    3rd   Male Adult        0
## 2    1st   Male Adult        0
## 3    2nd   Male Adult        0
## 4   Crew   Male Adult        0
## 5   Crew   Male Adult        0
## 6    3rd   Male Adult        0
## 7   Crew   Male Adult        0
## 8   Crew   Male Adult        1
## 9   Crew   Male Adult        0
## 10   1st Female Adult        1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The model will predict survival (yes/no) from the Titanic. Predictors will include class, sex, and age. We’ll look at a model of with passenger class as the only predictor versus a model that includes class, sex, and age.&lt;/p&gt;
&lt;div id=&#34;survived-class&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;code&gt;Survived ~ Class&lt;/code&gt;&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(pROC)

fit1 &amp;lt;- glm(Survived ~ Class, data = titanic, family = binomial)

prob &amp;lt;- predict(fit1,type=c(&amp;quot;response&amp;quot;))

fit1$prob &amp;lt;- prob

roc1 &amp;lt;- roc(Survived ~ prob, data = titanic, plot = FALSE)

roc1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## roc.formula(formula = Survived ~ prob, data = titanic, plot = FALSE)
## 
## Data: prob in 1490 controls (Survived 0) &amp;lt; 711 cases (Survived 1).
## Area under the curve: 0.6417&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;survived-class-sex-age&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;code&gt;Survived ~ Class + Sex + Age&lt;/code&gt;&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fit2 &amp;lt;- glm(Survived ~ Class + Sex + Age, data = titanic, family = binomial)

prob &amp;lt;- predict(fit2,type=c(&amp;quot;response&amp;quot;))

fit2$prob &amp;lt;- prob

roc2 &amp;lt;- roc(Survived ~ prob, data = titanic, plot = FALSE)

roc2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## roc.formula(formula = Survived ~ prob, data = titanic, plot = FALSE)
## 
## Data: prob in 1490 controls (Survived 0) &amp;lt; 711 cases (Survived 1).
## Area under the curve: 0.7597&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(roc1, lty = &amp;quot;solid&amp;quot;)
lines(roc2, lty = &amp;quot;dotted&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/notes/plot-roc_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggplot2)

df1 &amp;lt;- 
  data_frame(
    sensitivity = roc1$sensitivities,
    specificity = roc1$specificities,
    thresholds = roc1$thresholds,
    model = &amp;quot;Survived ~ Class&amp;quot;
  )

df2 &amp;lt;- 
  data_frame(
    sensitivity = roc2$sensitivities,
    specificity = roc2$specificities,
    thresholds = roc2$thresholds,
    model = &amp;quot;Survived ~ Class + Sex + Age&amp;quot;
  )

rbind(df1,df2) %&amp;gt;%
  ggplot(aes(1-specificity, sensitivity)) +
  geom_line(aes(group = model, lty = model)) +
  theme(legend.position = &amp;quot;bottom&amp;quot;, 
        legend.title = element_blank())&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/notes/plot-roc_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;From &lt;a href=&#34;https://en.wikipedia.org/wiki/Receiver_operating_characteristic&#34;&gt;Receiver operating characteristic&lt;/a&gt; by &lt;a href=&#34;https://en.wikipedia.org/&#34;&gt;Wikipedia&lt;/a&gt; licensed under &lt;a href=&#34;https://creativecommons.org/licenses/by-sa/3.0/us/&#34;&gt;CC BY-SA 3.0&lt;/a&gt;.&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Looping Across Files</title>
      <link>/notes/file-manipulation-loops/</link>
      <pubDate>Sat, 29 Jun 2019 17:14:59 +0000</pubDate>
      
      <guid>/notes/file-manipulation-loops/</guid>
      <description>


&lt;p&gt;When performing repetitive file manipulation operations, it can be useful to write a loop.&lt;/p&gt;
&lt;p&gt;Let’s assume you have a file structure organized as follows:&lt;/p&gt;
&lt;pre class=&#34;text&#34;&gt;&lt;code&gt;.
+-- loop.sh
+-- loop.R
+-- raw
|   +-- sample1.bed
|   +-- sample2.bed
|   +-- sample3.bed
|   +-- sample4.bed
|   +-- sample5.bed
+-- processed
|   +-- &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You’d like to loop through all of the &lt;code&gt;.bed&lt;/code&gt; files in the &lt;code&gt;raw/&lt;/code&gt; directory, and output the first and last columns in a &lt;code&gt;.csv&lt;/code&gt; file in the &lt;code&gt;processed/&lt;/code&gt; directory that shares the same file prefix (i.e. “sample1”) as the given input.&lt;/p&gt;
&lt;p&gt;To do so you could write a bash script that is in a file called &lt;code&gt;loop.sh&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;#!/bin/bash

# loop through all .bed files in the raw dir
FILES=raw/*.bed

for f in $FILES

do
  # message
  printf &amp;quot;\n%s\n%s\n&amp;quot; &amp;quot;processing $f ...&amp;quot; &amp;quot;------------------------------&amp;quot;

  # get input file name ...
  # ... and create output file based on that
  in_fn=$(basename -- &amp;quot;$f&amp;quot;)
  out_fn=&amp;quot;${in_fn%.*}&amp;quot;

  # use awk to get first and last columns  ...
  # ... pipe output to csv format
  awk &amp;#39;BEGIN{FS=&amp;quot;\t&amp;quot;;OFS=&amp;quot;,&amp;quot;}{print $1, $NF}&amp;#39; $f &amp;gt; processed/&amp;quot;$out_fn&amp;quot;.csv

done&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And in &lt;code&gt;loop.R&lt;/code&gt; you could write something like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;files &amp;lt;- list.files(&amp;quot;raw&amp;quot;, full.names = TRUE)

for (f in files) {
  
  bed &amp;lt;- read.delim(f, sep = &amp;quot;\t&amp;quot;)
  
  out_fp &amp;lt;- paste0(&amp;quot;processed/&amp;quot;, 
                   tools::file_path_sans_ext(basename(f)),
                   &amp;quot;.csv&amp;quot;)
  
  write.csv(bed[,c(1,ncol(bed))], row.names = FALSE, file = out_fp)
  
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Both of the above should work and yield the following:&lt;/p&gt;
&lt;pre class=&#34;text&#34;&gt;&lt;code&gt;.
+-- loop.sh
+-- loop.R
+-- raw
|   +-- sample1.bed
|   +-- sample2.bed
|   +-- sample3.bed
|   +-- sample4.bed
|   +-- sample5.bed
+-- processed
|   +-- sample1.csv
|   +-- sample2.csv
|   +-- sample3.csv
|   +-- sample4.csv
|   +-- sample5.csv&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, your choice of method could have serious performance implications.&lt;/p&gt;
&lt;p&gt;I tested this on dummy files that were roughly 100MB each (~ 2.5 million rows, 4 columns).&lt;/p&gt;
&lt;p&gt;The R method took ~ 90 seconds … the bash script finished in 30 seconds.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Docker Image for tabulizer</title>
      <link>/notes/docker-tabulizer/</link>
      <pubDate>Thu, 27 Jun 2019 17:14:59 +0000</pubDate>
      
      <guid>/notes/docker-tabulizer/</guid>
      <description>


&lt;div id=&#34;tldr&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;TL;DR&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;tabulizer&lt;/code&gt; R package allows you extract tables from PDFs. It requires Java dependencies. To use the package via a Docker container:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;docker pull vpnagraj/tabulizer
mkdir output
# table of interest is on page 5 of some.pdf
infile=some.pdf
docker run -ti \
-v $(pwd)/$infile:/$infile \
-v $(pwd)/output:/output vpnagraj/tabulizer $infile 5&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;p&gt;Avoidance of dependency hell can motivate folks to move towards containerization. I recently experienced (admittedly minor) frustration with installing dependencies for an R workflow. I had read about the &lt;a href=&#34;https://github.com/ropensci/tabulizer&#34;&gt;&lt;code&gt;tabulizer&lt;/code&gt; R package&lt;/a&gt;, which serves as a set of bindings for the &lt;a href=&#34;https://github.com/tabulapdf/tabula-java/&#34;&gt;&lt;code&gt;tabula&lt;/code&gt; PDF table extractor Java library&lt;/a&gt;. The documentation for &lt;code&gt;tabulizer&lt;/code&gt; explains that Mac OS users need a &lt;a href=&#34;https://support.apple.com/kb/DL1572?locale=en_US&#34;&gt;particular version of Java&lt;/a&gt;. I wanted to try the package but preferred not to install the recommended (but deprecated) version of Java. So instead, I put together a workflow using Docker to:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Containerize all of the necessary software&lt;/li&gt;
&lt;li&gt;Script the container image to run R code that calls functions from the &lt;code&gt;tabulizer&lt;/code&gt; package&lt;/li&gt;
&lt;li&gt;Specify the Docker “Entrypoint” such that I could pass in a &lt;code&gt;.pdf&lt;/code&gt; file and page number with a table to be extracted&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The code below includes the &lt;code&gt;Dockerfile&lt;/code&gt; and instructions to build the container. Alternatively the image is on &lt;a href=&#34;https://hub.docker.com/r/vpnagraj/tabulizer&#34;&gt;DockerHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;dockerfile&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;code&gt;Dockerfile&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;The Docker image first pulls the latest version of the &lt;code&gt;r-base&lt;/code&gt; image, then installs Java dependencies and R package. The commands also make an &lt;code&gt;output/&lt;/code&gt; directory (to be mapped to a local equivalent on the host during &lt;code&gt;docker run&lt;/code&gt;) and copies the &lt;code&gt;run.R&lt;/code&gt; script from the local machine into the container. Finally, the uses &lt;a href=&#34;https://goinbigdata.com/docker-run-vs-cmd-vs-entrypoint/&#34;&gt;&lt;code&gt;ENTRYPOINT&lt;/code&gt; to run a command when the container is executed&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;FROM r-base:latest

RUN apt-get -y update &amp;amp;&amp;amp; apt-get install -y \
   default-jdk \
   r-cran-rjava

RUN Rscript -e &amp;quot;install.packages(c(&amp;#39;tabulizer&amp;#39;), repos = &amp;#39;http://cran.rstudio.com&amp;#39;)&amp;quot;

# create output directory
RUN mkdir output

# move run script in
COPY ./run.R /

ENTRYPOINT [&amp;quot;Rscript&amp;quot;,&amp;quot;--vanilla&amp;quot;, &amp;quot;run.R&amp;quot;]                                          &lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;run.r&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;code&gt;run.R&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;run.R&lt;/code&gt; script is copied into the Docker image when built. When the container is run, the script is executed. The code parses the two command line arguments (first is the location of the .pdf file, second is the page that contains the table). The code writes the parsed table to a &lt;code&gt;.csv&lt;/code&gt; file.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tabulizer)

arguments &amp;lt;- commandArgs(trailingOnly = TRUE)

f &amp;lt;- arguments[1]
p &amp;lt;- arguments[2]

tab &amp;lt;- extract_tables(f,p)

if(is.list(tab) &amp;amp;&amp;amp; !is.data.frame(tab)) {

  tab &amp;lt;- tab[[1]]

}

out_path &amp;lt;- paste0(&amp;quot;output/&amp;quot;,tools::file_path_sans_ext(f), &amp;quot;_&amp;quot;, p, &amp;quot;.csv&amp;quot;)

res_out &amp;lt;- try(write.csv(tab, file = out_path, row.names = FALSE))

if(is.null(res_out)) {

  message(
    sprintf(&amp;quot;%s parsed and written to %s (%d)&amp;quot;, 
            f, 
            out_path,
            nrow(tab)
            )
    )

} else {

  message(res_out)

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;building-the-image&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Building the image&lt;/h4&gt;
&lt;p&gt;To build the image first clone the GitHub repository that contains the image code:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;git clone https://github.com/vpnagraj/tabulizer-docker.git&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Make sure &lt;code&gt;run.R&lt;/code&gt; has appropriate permissions to be executed:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;cd tabulizer-docker
chmod+x run.R&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Build the image:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;docker build -t --no-cache vpnagraj/tabulizer .&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Alternatively you can pull the &lt;a href=&#34;https://cloud.docker.com/u/vpnagraj/repository/docker/vpnagraj/tabulizer&#34;&gt;existing image from DockerHub&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;docker pull vpnagraj/tabulizer&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;running&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Running&lt;/h4&gt;
&lt;p&gt;To run the image you can first make sure you’ve created a directory for the output next to the &lt;code&gt;.pdf&lt;/code&gt; file you’ll parse:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;mkdir output&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next (optionally) set a variable to the input file to parse (a PDF called &lt;code&gt;some.pdf&lt;/code&gt; in this example):&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;infile=some.pdf&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now run the container … in this case we want the table that’s on page 5 of &lt;code&gt;some.pdf&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;docker run -ti -v $(pwd)/$infile:/$infile -v $(pwd)/output:/output vpnagraj/tabulizer $infile 5&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If successful, the output will be in &lt;code&gt;.csv&lt;/code&gt; format at &lt;code&gt;output/some_5.csv&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;example&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Example&lt;/h4&gt;
&lt;p&gt;Here is a scenario …&lt;/p&gt;
&lt;p&gt;The May 2019 CDC Vital Statistics Rapid Release includes data regarding births in the United States from 2017 and 2018:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cdc.gov/nchs/data/vsrr/vsrr-007-508.pdf&#34; class=&#34;uri&#34;&gt;https://www.cdc.gov/nchs/data/vsrr/vsrr-007-508.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Page 15 features a table of the rate of preterm birth by state.&lt;/p&gt;
&lt;p&gt;Assuming I have the PDF above downloaded and the &lt;code&gt;tabulizer&lt;/code&gt; Docker container available, I could run the following (from the directory that holds the &lt;code&gt;.pdf&lt;/code&gt;):&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;mkdir output
infile=vsrr-007-508.pdf&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;docker run -ti \
-v $(pwd)/$infile:/$infile \
-v $(pwd)/output:/output vpnagraj/tabulizer $infile 15&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)

preterm &amp;lt;-
  # skip mostly empty rows and ignore overall US values
  read_csv(&amp;quot;output/vsrr-007-508_15.csv&amp;quot;, 
           skip = 4) %&amp;gt;%
  select(State = 1, `2018` =  7, `2017` = 9)

preterm %&amp;gt;%
  head(10)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 10 x 3
##    State                `2018` `2017`
##    &amp;lt;chr&amp;gt;                 &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;
##  1 Alabama               12.5   12.0 
##  2 Alaska                 9.26   8.98
##  3 Arizona                9.51   9.27
##  4 Arkansas              11.6   11.4 
##  5 California             8.79   8.68
##  6 Colorado               9.22   8.76
##  7 Connecticut            9.36   9.48
##  8 Delaware               9.55  10.2 
##  9 District of Columbia  10.1   10.6 
## 10 Florida               10.2   10.2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;preterm %&amp;gt;%
  # no dc ...
  filter(State != &amp;quot;District of Columbia&amp;quot;) %&amp;gt;%
  gather(year,value,`2018`:`2017`) %&amp;gt;%
  mutate(value = value/100) %&amp;gt;%
  ggplot(aes(year, value, group = State)) +
  geom_point()  +
  geom_line() +
  scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
  labs(x = NULL, 
       y = &amp;quot;% infants born preterm&amp;quot;, 
       title  = &amp;quot;Rate of Preterm Birth by State&amp;quot;) +
  facet_wrap(~ State, ncol = 10) +
  theme_bw() +
  theme(text = element_text(size = 7))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/notes/docker-tabulizer_files/figure-html/unnamed-chunk-14-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The data above was acquired from the CDC National Center for Health Statistics. The report states that all material is in the public domain and may be reproduced or copied without commission.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hamilton BE, Martin JA, Osterman MJK, Rossen LM. Births: Provisional data for 2018. Vital Statistics Rapid Release; no 7. Hyattsville, MD: National Center for Health Statistics. May 2019.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
